/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * 핀플로우 프로모션: Admin API
 * 핀플로우 프로모션: Admin API 문서
 * OpenAPI spec version: 1.0
 */
import {useQuery} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult,
} from '@tanstack/react-query';

import type {
  EventEntryResponse,
  EventEntryStatsExcelResponse,
  EventEntryStatsResponse,
  GetEventByAppIdListParams,
  GetEventEntryStatsByAppIdAndEventTypeParams,
  GetEventEntryStatsExcelParams,
} from '.././model';

import {customFetch} from '../../custom-fetch.server';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * 필터와 페이징 정보를 기반으로 이벤트 응모 목록을 조회합니다.<br/><br/>- 필터 조건은 JSON 형식으로 전달됩니다.<br/><br/>- 예시) {"adid":"11111"}
 * @summary 앱 별 이벤트 응모 목록 조회
 */
export const getGetEventByAppIdListUrl = (
  appId: string,
  eventId: string,
  params?: GetEventByAppIdListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/admin/api/events/${appId}/${eventId}/entries?${stringifiedParams}`
    : `/admin/api/events/${appId}/${eventId}/entries`;
};

export const getEventByAppIdList = async (
  appId: string,
  eventId: string,
  params?: GetEventByAppIdListParams,
  options?: RequestInit,
): Promise<EventEntryResponse> => {
  return customFetch<EventEntryResponse>(
    getGetEventByAppIdListUrl(appId, eventId, params),
    {
      ...options,
      method: 'GET',
    },
  );
};

export const getGetEventByAppIdListQueryKey = (
  appId: string,
  eventId: string,
  params?: GetEventByAppIdListParams,
) => {
  return [
    `/admin/api/events/${appId}/${eventId}/entries`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetEventByAppIdListQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventByAppIdList>>,
  TError = unknown,
>(
  appId: string,
  eventId: string,
  params?: GetEventByAppIdListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventByAppIdList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetEventByAppIdListQueryKey(appId, eventId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEventByAppIdList>>
  > = ({signal}) =>
    getEventByAppIdList(appId, eventId, params, {signal, ...requestOptions});

  return {
    queryKey,
    queryFn,
    enabled: !!(appId && eventId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventByAppIdList>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetEventByAppIdListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEventByAppIdList>>
>;
export type GetEventByAppIdListQueryError = unknown;

export function useGetEventByAppIdList<
  TData = Awaited<ReturnType<typeof getEventByAppIdList>>,
  TError = unknown,
>(
  appId: string,
  eventId: string,
  params: undefined | GetEventByAppIdListParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventByAppIdList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventByAppIdList>>,
          TError,
          Awaited<ReturnType<typeof getEventByAppIdList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEventByAppIdList<
  TData = Awaited<ReturnType<typeof getEventByAppIdList>>,
  TError = unknown,
>(
  appId: string,
  eventId: string,
  params?: GetEventByAppIdListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventByAppIdList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventByAppIdList>>,
          TError,
          Awaited<ReturnType<typeof getEventByAppIdList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useGetEventByAppIdList<
  TData = Awaited<ReturnType<typeof getEventByAppIdList>>,
  TError = unknown,
>(
  appId: string,
  eventId: string,
  params?: GetEventByAppIdListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventByAppIdList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary 앱 별 이벤트 응모 목록 조회
 */

export function useGetEventByAppIdList<
  TData = Awaited<ReturnType<typeof getEventByAppIdList>>,
  TError = unknown,
>(
  appId: string,
  eventId: string,
  params?: GetEventByAppIdListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventByAppIdList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetEventByAppIdListQueryOptions(
    appId,
    eventId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary 앱 별 이벤트 응모 목록 조회
 */
export const prefetchGetEventByAppIdList = async <
  TData = Awaited<ReturnType<typeof getEventByAppIdList>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  appId: string,
  eventId: string,
  params?: GetEventByAppIdListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventByAppIdList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetEventByAppIdListQueryOptions(
    appId,
    eventId,
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary 앱 별 이벤트 응모 통계 조회
 */
export const getGetEventEntryStatsByAppIdAndEventTypeUrl = (
  appId: string,
  params: GetEventEntryStatsByAppIdAndEventTypeParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/admin/api/event-entry-stats/${appId}?${stringifiedParams}`
    : `/admin/api/event-entry-stats/${appId}`;
};

export const getEventEntryStatsByAppIdAndEventType = async (
  appId: string,
  params: GetEventEntryStatsByAppIdAndEventTypeParams,
  options?: RequestInit,
): Promise<EventEntryStatsResponse> => {
  return customFetch<EventEntryStatsResponse>(
    getGetEventEntryStatsByAppIdAndEventTypeUrl(appId, params),
    {
      ...options,
      method: 'GET',
    },
  );
};

export const getGetEventEntryStatsByAppIdAndEventTypeQueryKey = (
  appId: string,
  params: GetEventEntryStatsByAppIdAndEventTypeParams,
) => {
  return [
    `/admin/api/event-entry-stats/${appId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetEventEntryStatsByAppIdAndEventTypeQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsByAppIdAndEventTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetEventEntryStatsByAppIdAndEventTypeQueryKey(appId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>
  > = ({signal}) =>
    getEventEntryStatsByAppIdAndEventType(appId, params, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetEventEntryStatsByAppIdAndEventTypeQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>
>;
export type GetEventEntryStatsByAppIdAndEventTypeQueryError = unknown;

export function useGetEventEntryStatsByAppIdAndEventType<
  TData = Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsByAppIdAndEventTypeParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>,
          TError,
          Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEventEntryStatsByAppIdAndEventType<
  TData = Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsByAppIdAndEventTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>,
          TError,
          Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useGetEventEntryStatsByAppIdAndEventType<
  TData = Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsByAppIdAndEventTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary 앱 별 이벤트 응모 통계 조회
 */

export function useGetEventEntryStatsByAppIdAndEventType<
  TData = Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsByAppIdAndEventTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetEventEntryStatsByAppIdAndEventTypeQueryOptions(
    appId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary 앱 별 이벤트 응모 통계 조회
 */
export const prefetchGetEventEntryStatsByAppIdAndEventType = async <
  TData = Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  appId: string,
  params: GetEventEntryStatsByAppIdAndEventTypeParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsByAppIdAndEventType>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetEventEntryStatsByAppIdAndEventTypeQueryOptions(
    appId,
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};

/**
 * @summary 앱 별 이벤트 응모 통계 엑셀 다운로드
 */
export const getGetEventEntryStatsExcelUrl = (
  appId: string,
  params: GetEventEntryStatsExcelParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/admin/api/event-entry-stats/${appId}/excel?${stringifiedParams}`
    : `/admin/api/event-entry-stats/${appId}/excel`;
};

export const getEventEntryStatsExcel = async (
  appId: string,
  params: GetEventEntryStatsExcelParams,
  options?: RequestInit,
): Promise<EventEntryStatsExcelResponse> => {
  return customFetch<EventEntryStatsExcelResponse>(
    getGetEventEntryStatsExcelUrl(appId, params),
    {
      ...options,
      method: 'GET',
    },
  );
};

export const getGetEventEntryStatsExcelQueryKey = (
  appId: string,
  params: GetEventEntryStatsExcelParams,
) => {
  return [
    `/admin/api/event-entry-stats/${appId}/excel`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetEventEntryStatsExcelQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventEntryStatsExcel>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsExcelParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsExcel>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetEventEntryStatsExcelQueryKey(appId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEventEntryStatsExcel>>
  > = ({signal}) =>
    getEventEntryStatsExcel(appId, params, {signal, ...requestOptions});

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventEntryStatsExcel>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetEventEntryStatsExcelQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEventEntryStatsExcel>>
>;
export type GetEventEntryStatsExcelQueryError = unknown;

export function useGetEventEntryStatsExcel<
  TData = Awaited<ReturnType<typeof getEventEntryStatsExcel>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsExcelParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsExcel>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventEntryStatsExcel>>,
          TError,
          Awaited<ReturnType<typeof getEventEntryStatsExcel>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEventEntryStatsExcel<
  TData = Awaited<ReturnType<typeof getEventEntryStatsExcel>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsExcelParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsExcel>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventEntryStatsExcel>>,
          TError,
          Awaited<ReturnType<typeof getEventEntryStatsExcel>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useGetEventEntryStatsExcel<
  TData = Awaited<ReturnType<typeof getEventEntryStatsExcel>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsExcelParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsExcel>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary 앱 별 이벤트 응모 통계 엑셀 다운로드
 */

export function useGetEventEntryStatsExcel<
  TData = Awaited<ReturnType<typeof getEventEntryStatsExcel>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsExcelParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsExcel>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetEventEntryStatsExcelQueryOptions(
    appId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary 앱 별 이벤트 응모 통계 엑셀 다운로드
 */
export const prefetchGetEventEntryStatsExcel = async <
  TData = Awaited<ReturnType<typeof getEventEntryStatsExcel>>,
  TError = unknown,
>(
  queryClient: QueryClient,
  appId: string,
  params: GetEventEntryStatsExcelParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsExcel>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
): Promise<QueryClient> => {
  const queryOptions = getGetEventEntryStatsExcelQueryOptions(
    appId,
    params,
    options,
  );

  await queryClient.prefetchQuery(queryOptions);

  return queryClient;
};
