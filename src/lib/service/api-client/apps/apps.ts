/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * ÌïÄÌîåÎ°úÏö∞ ÌîÑÎ°úÎ™®ÏÖò: Admin API
 * ÌïÄÌîåÎ°úÏö∞ ÌîÑÎ°úÎ™®ÏÖò: Admin API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import {useMutation, useQuery, useSuspenseQuery} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';

import type {
  AppByUserResponse,
  AppListResponse,
  AppRequest,
  AppResponse,
  AppUpdateRequest,
  EmptyResponse,
  GetAppListParams,
} from '.././model';

import {customFetch} from '../../custom-fetch.client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Ïï± IDÎ•º Í∏∞Î∞òÏúºÎ°ú Ïï±Ïùò ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Ïï± ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const getGetAppDetailUrl = (appId: string) => {
  return `/admin/api/apps/${appId}`;
};

export const getAppDetail = async (
  appId: string,
  options?: RequestInit,
): Promise<AppResponse> => {
  return customFetch<AppResponse>(getGetAppDetailUrl(appId), {
    ...options,
    method: 'GET',
  });
};

export const getGetAppDetailQueryKey = (appId: string) => {
  return [`/admin/api/apps/${appId}`] as const;
};

export const getGetAppDetailQueryOptions = <
  TData = Awaited<ReturnType<typeof getAppDetail>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAppDetail>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAppDetailQueryKey(appId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAppDetail>>> = ({
    signal,
  }) => getAppDetail(appId, {signal, ...requestOptions});

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAppDetail>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetAppDetailQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAppDetail>>
>;
export type GetAppDetailQueryError = unknown;

export function useGetAppDetail<
  TData = Awaited<ReturnType<typeof getAppDetail>>,
  TError = unknown,
>(
  appId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAppDetail>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppDetail>>,
          TError,
          Awaited<ReturnType<typeof getAppDetail>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAppDetail<
  TData = Awaited<ReturnType<typeof getAppDetail>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAppDetail>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppDetail>>,
          TError,
          Awaited<ReturnType<typeof getAppDetail>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useGetAppDetail<
  TData = Awaited<ReturnType<typeof getAppDetail>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAppDetail>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary Ïï± ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useGetAppDetail<
  TData = Awaited<ReturnType<typeof getAppDetail>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAppDetail>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAppDetailQueryOptions(appId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAppDetailSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getAppDetail>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAppDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAppDetailQueryKey(appId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAppDetail>>> = ({
    signal,
  }) => getAppDetail(appId, {signal, ...requestOptions});

  return {queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getAppDetail>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetAppDetailSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAppDetail>>
>;
export type GetAppDetailSuspenseQueryError = unknown;

export function useGetAppDetailSuspense<
  TData = Awaited<ReturnType<typeof getAppDetail>>,
  TError = unknown,
>(
  appId: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAppDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAppDetailSuspense<
  TData = Awaited<ReturnType<typeof getAppDetail>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAppDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAppDetailSuspense<
  TData = Awaited<ReturnType<typeof getAppDetail>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAppDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ïï± ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useGetAppDetailSuspense<
  TData = Awaited<ReturnType<typeof getAppDetail>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAppDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAppDetailSuspenseQueryOptions(appId, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Ïï± Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const getUpdateAppUrl = (appId: string) => {
  return `/admin/api/apps/${appId}`;
};

export const updateApp = async (
  appId: string,
  appUpdateRequest: AppUpdateRequest,
  options?: RequestInit,
): Promise<EmptyResponse> => {
  return customFetch<EmptyResponse>(getUpdateAppUrl(appId), {
    ...options,
    method: 'PUT',
    headers: {'Content-Type': 'application/json', ...options?.headers},
    body: JSON.stringify(appUpdateRequest),
  });
};

export const getUpdateAppMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateApp>>,
    TError,
    {appId: string; data: AppUpdateRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateApp>>,
  TError,
  {appId: string; data: AppUpdateRequest},
  TContext
> => {
  const mutationKey = ['updateApp'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateApp>>,
    {appId: string; data: AppUpdateRequest}
  > = (props) => {
    const {appId, data} = props ?? {};

    return updateApp(appId, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type UpdateAppMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateApp>>
>;
export type UpdateAppMutationBody = AppUpdateRequest;
export type UpdateAppMutationError = unknown;

/**
 * @summary Ïï± Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const useUpdateApp = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateApp>>,
      TError,
      {appId: string; data: AppUpdateRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateApp>>,
  TError,
  {appId: string; data: AppUpdateRequest},
  TContext
> => {
  const mutationOptions = getUpdateAppMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * ÏÉàÎ°úÏö¥ Ïï±ÏùÑ Îì±Î°ùÌï©ÎãàÎã§.
 * @summary Ïï± Ïã†Í∑ú Îì±Î°ù
 */
export const getCreateAppUrl = () => {
  return `/admin/api/apps`;
};

export const createApp = async (
  appRequest: AppRequest,
  options?: RequestInit,
): Promise<EmptyResponse> => {
  return customFetch<EmptyResponse>(getCreateAppUrl(), {
    ...options,
    method: 'POST',
    headers: {'Content-Type': 'application/json', ...options?.headers},
    body: JSON.stringify(appRequest),
  });
};

export const getCreateAppMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createApp>>,
    TError,
    {data: AppRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createApp>>,
  TError,
  {data: AppRequest},
  TContext
> => {
  const mutationKey = ['createApp'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createApp>>,
    {data: AppRequest}
  > = (props) => {
    const {data} = props ?? {};

    return createApp(data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type CreateAppMutationResult = NonNullable<
  Awaited<ReturnType<typeof createApp>>
>;
export type CreateAppMutationBody = AppRequest;
export type CreateAppMutationError = unknown;

/**
 * @summary Ïï± Ïã†Í∑ú Îì±Î°ù
 */
export const useCreateApp = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createApp>>,
      TError,
      {data: AppRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createApp>>,
  TError,
  {data: AppRequest},
  TContext
> => {
  const mutationOptions = getCreateAppMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * ÌïÑÌÑ∞ÏôÄ ÌéòÏù¥Ïßï Ï†ïÎ≥¥Î•º Í∏∞Î∞òÏúºÎ°ú Ïï± Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.<br/><br/>- ÌïÑÌÑ∞ Ï°∞Í±¥ÏùÄ JSON ÌòïÏãùÏúºÎ°ú Ï†ÑÎã¨Îê©ÎãàÎã§.<br/><br/>- ÏòàÏãú) {"name":"Ïï†ÎìúÌè¨Îü¨Ïä§"}
 * @summary Ïï± Î™©Î°ù Ï°∞Ìöå
 */
export const getGetAppListUrl = (params?: GetAppListParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/admin/api/apps/list?${stringifiedParams}`
    : `/admin/api/apps/list`;
};

export const getAppList = async (
  params?: GetAppListParams,
  options?: RequestInit,
): Promise<AppListResponse> => {
  return customFetch<AppListResponse>(getGetAppListUrl(params), {
    ...options,
    method: 'GET',
  });
};

export const getGetAppListQueryKey = (params?: GetAppListParams) => {
  return [`/admin/api/apps/list`, ...(params ? [params] : [])] as const;
};

export const getGetAppListQueryOptions = <
  TData = Awaited<ReturnType<typeof getAppList>>,
  TError = unknown,
>(
  params?: GetAppListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAppList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAppListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAppList>>> = ({
    signal,
  }) => getAppList(params, {signal, ...requestOptions});

  return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
    Awaited<ReturnType<typeof getAppList>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetAppListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAppList>>
>;
export type GetAppListQueryError = unknown;

export function useGetAppList<
  TData = Awaited<ReturnType<typeof getAppList>>,
  TError = unknown,
>(
  params: undefined | GetAppListParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAppList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppList>>,
          TError,
          Awaited<ReturnType<typeof getAppList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAppList<
  TData = Awaited<ReturnType<typeof getAppList>>,
  TError = unknown,
>(
  params?: GetAppListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAppList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppList>>,
          TError,
          Awaited<ReturnType<typeof getAppList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useGetAppList<
  TData = Awaited<ReturnType<typeof getAppList>>,
  TError = unknown,
>(
  params?: GetAppListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAppList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary Ïï± Î™©Î°ù Ï°∞Ìöå
 */

export function useGetAppList<
  TData = Awaited<ReturnType<typeof getAppList>>,
  TError = unknown,
>(
  params?: GetAppListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getAppList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAppListQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAppListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getAppList>>,
  TError = unknown,
>(
  params?: GetAppListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAppList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAppListQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getAppList>>> = ({
    signal,
  }) => getAppList(params, {signal, ...requestOptions});

  return {queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getAppList>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetAppListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAppList>>
>;
export type GetAppListSuspenseQueryError = unknown;

export function useGetAppListSuspense<
  TData = Awaited<ReturnType<typeof getAppList>>,
  TError = unknown,
>(
  params: undefined | GetAppListParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAppList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAppListSuspense<
  TData = Awaited<ReturnType<typeof getAppList>>,
  TError = unknown,
>(
  params?: GetAppListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAppList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAppListSuspense<
  TData = Awaited<ReturnType<typeof getAppList>>,
  TError = unknown,
>(
  params?: GetAppListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAppList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ïï± Î™©Î°ù Ï°∞Ìöå
 */

export function useGetAppListSuspense<
  TData = Awaited<ReturnType<typeof getAppList>>,
  TError = unknown,
>(
  params?: GetAppListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAppList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAppListSuspenseQueryOptions(params, options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Î°úÍ∑∏Ïù∏ Ïú†Ï†ÄÏóê Îî∞Î•∏ Ïï± Î™©Î°ù Ï°∞Ìöå: Ïö∞Ï∏° ÏÉÅÎã® dropdown Î™©Î°ù ÎÖ∏Ï∂úÏö©
 */
export const getGetAppListByUserUrl = () => {
  return `/admin/api/apps/list-by-user`;
};

export const getAppListByUser = async (
  options?: RequestInit,
): Promise<AppByUserResponse> => {
  return customFetch<AppByUserResponse>(getGetAppListByUserUrl(), {
    ...options,
    method: 'GET',
  });
};

export const getGetAppListByUserQueryKey = () => {
  return [`/admin/api/apps/list-by-user`] as const;
};

export const getGetAppListByUserQueryOptions = <
  TData = Awaited<ReturnType<typeof getAppListByUser>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof getAppListByUser>>, TError, TData>
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAppListByUserQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAppListByUser>>
  > = ({signal}) => getAppListByUser({signal, ...requestOptions});

  return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
    Awaited<ReturnType<typeof getAppListByUser>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetAppListByUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAppListByUser>>
>;
export type GetAppListByUserQueryError = unknown;

export function useGetAppListByUser<
  TData = Awaited<ReturnType<typeof getAppListByUser>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppListByUser>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppListByUser>>,
          TError,
          Awaited<ReturnType<typeof getAppListByUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAppListByUser<
  TData = Awaited<ReturnType<typeof getAppListByUser>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppListByUser>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAppListByUser>>,
          TError,
          Awaited<ReturnType<typeof getAppListByUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useGetAppListByUser<
  TData = Awaited<ReturnType<typeof getAppListByUser>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppListByUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary Î°úÍ∑∏Ïù∏ Ïú†Ï†ÄÏóê Îî∞Î•∏ Ïï± Î™©Î°ù Ï°∞Ìöå: Ïö∞Ï∏° ÏÉÅÎã® dropdown Î™©Î°ù ÎÖ∏Ï∂úÏö©
 */

export function useGetAppListByUser<
  TData = Awaited<ReturnType<typeof getAppListByUser>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAppListByUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAppListByUserQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAppListByUserSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getAppListByUser>>,
  TError = unknown,
>(options?: {
  query?: Partial<
    UseSuspenseQueryOptions<
      Awaited<ReturnType<typeof getAppListByUser>>,
      TError,
      TData
    >
  >;
  request?: SecondParameter<typeof customFetch>;
}) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAppListByUserQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAppListByUser>>
  > = ({signal}) => getAppListByUser({signal, ...requestOptions});

  return {queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getAppListByUser>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetAppListByUserSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAppListByUser>>
>;
export type GetAppListByUserSuspenseQueryError = unknown;

export function useGetAppListByUserSuspense<
  TData = Awaited<ReturnType<typeof getAppListByUser>>,
  TError = unknown,
>(
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAppListByUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAppListByUserSuspense<
  TData = Awaited<ReturnType<typeof getAppListByUser>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAppListByUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAppListByUserSuspense<
  TData = Awaited<ReturnType<typeof getAppListByUser>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAppListByUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Î°úÍ∑∏Ïù∏ Ïú†Ï†ÄÏóê Îî∞Î•∏ Ïï± Î™©Î°ù Ï°∞Ìöå: Ïö∞Ï∏° ÏÉÅÎã® dropdown Î™©Î°ù ÎÖ∏Ï∂úÏö©
 */

export function useGetAppListByUserSuspense<
  TData = Awaited<ReturnType<typeof getAppListByUser>>,
  TError = unknown,
>(
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAppListByUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAppListByUserSuspenseQueryOptions(options);

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
