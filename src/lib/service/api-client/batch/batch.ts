/**
 * Generated by orval v7.8.0 🍺
 * Do not edit manually.
 * 핀플로우 프로모션: Admin API
 * 핀플로우 프로모션: Admin API 문서
 * OpenAPI spec version: 1.0
 */
import {useMutation} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from '@tanstack/react-query';

import type {
  EmptyResponse,
  SaveEventEntryStatsParams,
  SaveReportStatsParams,
} from '.././model';

import {customFetch} from '../../custom-fetch.client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary 리포트 배치 저장
 */
export const getSaveReportStatsUrl = (
  appId: string,
  params: SaveReportStatsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/admin/api/batch/report-stats/${appId}?${stringifiedParams}`
    : `/admin/api/batch/report-stats/${appId}`;
};

export const saveReportStats = async (
  appId: string,
  params: SaveReportStatsParams,
  options?: RequestInit,
): Promise<EmptyResponse> => {
  return customFetch<EmptyResponse>(getSaveReportStatsUrl(appId, params), {
    ...options,
    method: 'POST',
  });
};

export const getSaveReportStatsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof saveReportStats>>,
    TError,
    {appId: string; params: SaveReportStatsParams},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof saveReportStats>>,
  TError,
  {appId: string; params: SaveReportStatsParams},
  TContext
> => {
  const mutationKey = ['saveReportStats'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof saveReportStats>>,
    {appId: string; params: SaveReportStatsParams}
  > = (props) => {
    const {appId, params} = props ?? {};

    return saveReportStats(appId, params, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type SaveReportStatsMutationResult = NonNullable<
  Awaited<ReturnType<typeof saveReportStats>>
>;

export type SaveReportStatsMutationError = unknown;

/**
 * @summary 리포트 배치 저장
 */
export const useSaveReportStats = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof saveReportStats>>,
      TError,
      {appId: string; params: SaveReportStatsParams},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof saveReportStats>>,
  TError,
  {appId: string; params: SaveReportStatsParams},
  TContext
> => {
  const mutationOptions = getSaveReportStatsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary 이벤트 응모 통계 저장
 */
export const getSaveEventEntryStatsUrl = (
  appId: string,
  params?: SaveEventEntryStatsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/admin/api/batch/event-entry-stats/${appId}?${stringifiedParams}`
    : `/admin/api/batch/event-entry-stats/${appId}`;
};

export const saveEventEntryStats = async (
  appId: string,
  params?: SaveEventEntryStatsParams,
  options?: RequestInit,
): Promise<EmptyResponse> => {
  return customFetch<EmptyResponse>(getSaveEventEntryStatsUrl(appId, params), {
    ...options,
    method: 'POST',
  });
};

export const getSaveEventEntryStatsMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof saveEventEntryStats>>,
    TError,
    {appId: string; params?: SaveEventEntryStatsParams},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof saveEventEntryStats>>,
  TError,
  {appId: string; params?: SaveEventEntryStatsParams},
  TContext
> => {
  const mutationKey = ['saveEventEntryStats'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof saveEventEntryStats>>,
    {appId: string; params?: SaveEventEntryStatsParams}
  > = (props) => {
    const {appId, params} = props ?? {};

    return saveEventEntryStats(appId, params, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type SaveEventEntryStatsMutationResult = NonNullable<
  Awaited<ReturnType<typeof saveEventEntryStats>>
>;

export type SaveEventEntryStatsMutationError = unknown;

/**
 * @summary 이벤트 응모 통계 저장
 */
export const useSaveEventEntryStats = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof saveEventEntryStats>>,
      TError,
      {appId: string; params?: SaveEventEntryStatsParams},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof saveEventEntryStats>>,
  TError,
  {appId: string; params?: SaveEventEntryStatsParams},
  TContext
> => {
  const mutationOptions = getSaveEventEntryStatsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
