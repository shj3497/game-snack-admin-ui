/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * ÌïÄÌîåÎ°úÏö∞ ÌîÑÎ°úÎ™®ÏÖò: Admin API
 * ÌïÄÌîåÎ°úÏö∞ ÌîÑÎ°úÎ™®ÏÖò: Admin API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import {useMutation, useQuery, useSuspenseQuery} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';

import type {
  EmptyResponse,
  EventEntryStatsReportResponse,
  GetEventEntryStatsReportParams,
  GetReportStatsExcelParams,
  GetReportStatsParams,
  ReportProviderCreateRequest,
  ReportProviderListResponse,
  ReportProviderResponse,
  ReportProviderUpdateRequest,
  ReportStatsExcelResponse,
  ReportStatsResponse,
} from '.././model';

import {customFetch} from '../../custom-fetch.client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * @summary Î¶¨Ìè¨Ìä∏ Îß§Ï≤¥ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const getGetReportProviderDetailUrl = (
  appId: string,
  reportProviderId: string,
) => {
  return `/admin/api/reports/${appId}/${reportProviderId}`;
};

export const getReportProviderDetail = async (
  appId: string,
  reportProviderId: string,
  options?: RequestInit,
): Promise<ReportProviderResponse> => {
  return customFetch<ReportProviderResponse>(
    getGetReportProviderDetailUrl(appId, reportProviderId),
    {
      ...options,
      method: 'GET',
    },
  );
};

export const getGetReportProviderDetailQueryKey = (
  appId: string,
  reportProviderId: string,
) => {
  return [`/admin/api/reports/${appId}/${reportProviderId}`] as const;
};

export const getGetReportProviderDetailQueryOptions = <
  TData = Awaited<ReturnType<typeof getReportProviderDetail>>,
  TError = unknown,
>(
  appId: string,
  reportProviderId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetReportProviderDetailQueryKey(appId, reportProviderId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getReportProviderDetail>>
  > = ({signal}) =>
    getReportProviderDetail(appId, reportProviderId, {
      signal,
      ...requestOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!(appId && reportProviderId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getReportProviderDetail>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetReportProviderDetailQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReportProviderDetail>>
>;
export type GetReportProviderDetailQueryError = unknown;

export function useGetReportProviderDetail<
  TData = Awaited<ReturnType<typeof getReportProviderDetail>>,
  TError = unknown,
>(
  appId: string,
  reportProviderId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderDetail>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReportProviderDetail>>,
          TError,
          Awaited<ReturnType<typeof getReportProviderDetail>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetReportProviderDetail<
  TData = Awaited<ReturnType<typeof getReportProviderDetail>>,
  TError = unknown,
>(
  appId: string,
  reportProviderId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderDetail>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReportProviderDetail>>,
          TError,
          Awaited<ReturnType<typeof getReportProviderDetail>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useGetReportProviderDetail<
  TData = Awaited<ReturnType<typeof getReportProviderDetail>>,
  TError = unknown,
>(
  appId: string,
  reportProviderId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary Î¶¨Ìè¨Ìä∏ Îß§Ï≤¥ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useGetReportProviderDetail<
  TData = Awaited<ReturnType<typeof getReportProviderDetail>>,
  TError = unknown,
>(
  appId: string,
  reportProviderId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetReportProviderDetailQueryOptions(
    appId,
    reportProviderId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetReportProviderDetailSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getReportProviderDetail>>,
  TError = unknown,
>(
  appId: string,
  reportProviderId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetReportProviderDetailQueryKey(appId, reportProviderId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getReportProviderDetail>>
  > = ({signal}) =>
    getReportProviderDetail(appId, reportProviderId, {
      signal,
      ...requestOptions,
    });

  return {queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getReportProviderDetail>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetReportProviderDetailSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReportProviderDetail>>
>;
export type GetReportProviderDetailSuspenseQueryError = unknown;

export function useGetReportProviderDetailSuspense<
  TData = Awaited<ReturnType<typeof getReportProviderDetail>>,
  TError = unknown,
>(
  appId: string,
  reportProviderId: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetReportProviderDetailSuspense<
  TData = Awaited<ReturnType<typeof getReportProviderDetail>>,
  TError = unknown,
>(
  appId: string,
  reportProviderId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetReportProviderDetailSuspense<
  TData = Awaited<ReturnType<typeof getReportProviderDetail>>,
  TError = unknown,
>(
  appId: string,
  reportProviderId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Î¶¨Ìè¨Ìä∏ Îß§Ï≤¥ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useGetReportProviderDetailSuspense<
  TData = Awaited<ReturnType<typeof getReportProviderDetail>>,
  TError = unknown,
>(
  appId: string,
  reportProviderId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderDetail>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetReportProviderDetailSuspenseQueryOptions(
    appId,
    reportProviderId,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Î¶¨Ìè¨Ìä∏ Îß§Ï≤¥ ÏàòÏ†ï
 */
export const getUpdateReportProviderUrl = (
  appId: string,
  reportProviderId: string,
) => {
  return `/admin/api/reports/${appId}/${reportProviderId}`;
};

export const updateReportProvider = async (
  appId: string,
  reportProviderId: string,
  reportProviderUpdateRequest: ReportProviderUpdateRequest,
  options?: RequestInit,
): Promise<EmptyResponse> => {
  return customFetch<EmptyResponse>(
    getUpdateReportProviderUrl(appId, reportProviderId),
    {
      ...options,
      method: 'PUT',
      headers: {'Content-Type': 'application/json', ...options?.headers},
      body: JSON.stringify(reportProviderUpdateRequest),
    },
  );
};

export const getUpdateReportProviderMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateReportProvider>>,
    TError,
    {
      appId: string;
      reportProviderId: string;
      data: ReportProviderUpdateRequest;
    },
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateReportProvider>>,
  TError,
  {appId: string; reportProviderId: string; data: ReportProviderUpdateRequest},
  TContext
> => {
  const mutationKey = ['updateReportProvider'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateReportProvider>>,
    {appId: string; reportProviderId: string; data: ReportProviderUpdateRequest}
  > = (props) => {
    const {appId, reportProviderId, data} = props ?? {};

    return updateReportProvider(appId, reportProviderId, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type UpdateReportProviderMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateReportProvider>>
>;
export type UpdateReportProviderMutationBody = ReportProviderUpdateRequest;
export type UpdateReportProviderMutationError = unknown;

/**
 * @summary Î¶¨Ìè¨Ìä∏ Îß§Ï≤¥ ÏàòÏ†ï
 */
export const useUpdateReportProvider = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateReportProvider>>,
      TError,
      {
        appId: string;
        reportProviderId: string;
        data: ReportProviderUpdateRequest;
      },
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateReportProvider>>,
  TError,
  {appId: string; reportProviderId: string; data: ReportProviderUpdateRequest},
  TContext
> => {
  const mutationOptions = getUpdateReportProviderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Î¶¨Ìè¨Ìä∏ Îß§Ï≤¥ Î™©Î°ù Ï°∞Ìöå
 */
export const getGetReportProviderListUrl = (appId: string) => {
  return `/admin/api/reports/${appId}`;
};

export const getReportProviderList = async (
  appId: string,
  options?: RequestInit,
): Promise<ReportProviderListResponse> => {
  return customFetch<ReportProviderListResponse>(
    getGetReportProviderListUrl(appId),
    {
      ...options,
      method: 'GET',
    },
  );
};

export const getGetReportProviderListQueryKey = (appId: string) => {
  return [`/admin/api/reports/${appId}`] as const;
};

export const getGetReportProviderListQueryOptions = <
  TData = Awaited<ReturnType<typeof getReportProviderList>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetReportProviderListQueryKey(appId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getReportProviderList>>
  > = ({signal}) => getReportProviderList(appId, {signal, ...requestOptions});

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getReportProviderList>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetReportProviderListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReportProviderList>>
>;
export type GetReportProviderListQueryError = unknown;

export function useGetReportProviderList<
  TData = Awaited<ReturnType<typeof getReportProviderList>>,
  TError = unknown,
>(
  appId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReportProviderList>>,
          TError,
          Awaited<ReturnType<typeof getReportProviderList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetReportProviderList<
  TData = Awaited<ReturnType<typeof getReportProviderList>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReportProviderList>>,
          TError,
          Awaited<ReturnType<typeof getReportProviderList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useGetReportProviderList<
  TData = Awaited<ReturnType<typeof getReportProviderList>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary Î¶¨Ìè¨Ìä∏ Îß§Ï≤¥ Î™©Î°ù Ï°∞Ìöå
 */

export function useGetReportProviderList<
  TData = Awaited<ReturnType<typeof getReportProviderList>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetReportProviderListQueryOptions(appId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetReportProviderListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getReportProviderList>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetReportProviderListQueryKey(appId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getReportProviderList>>
  > = ({signal}) => getReportProviderList(appId, {signal, ...requestOptions});

  return {queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getReportProviderList>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetReportProviderListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReportProviderList>>
>;
export type GetReportProviderListSuspenseQueryError = unknown;

export function useGetReportProviderListSuspense<
  TData = Awaited<ReturnType<typeof getReportProviderList>>,
  TError = unknown,
>(
  appId: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetReportProviderListSuspense<
  TData = Awaited<ReturnType<typeof getReportProviderList>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetReportProviderListSuspense<
  TData = Awaited<ReturnType<typeof getReportProviderList>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Î¶¨Ìè¨Ìä∏ Îß§Ï≤¥ Î™©Î°ù Ï°∞Ìöå
 */

export function useGetReportProviderListSuspense<
  TData = Awaited<ReturnType<typeof getReportProviderList>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportProviderList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetReportProviderListSuspenseQueryOptions(
    appId,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Î¶¨Ìè¨Ìä∏ Îß§Ï≤¥ ÏÉùÏÑ±
 */
export const getCreateReportProviderUrl = (appId: string) => {
  return `/admin/api/reports/${appId}`;
};

export const createReportProvider = async (
  appId: string,
  reportProviderCreateRequest: ReportProviderCreateRequest,
  options?: RequestInit,
): Promise<EmptyResponse> => {
  return customFetch<EmptyResponse>(getCreateReportProviderUrl(appId), {
    ...options,
    method: 'POST',
    headers: {'Content-Type': 'application/json', ...options?.headers},
    body: JSON.stringify(reportProviderCreateRequest),
  });
};

export const getCreateReportProviderMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createReportProvider>>,
    TError,
    {appId: string; data: ReportProviderCreateRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createReportProvider>>,
  TError,
  {appId: string; data: ReportProviderCreateRequest},
  TContext
> => {
  const mutationKey = ['createReportProvider'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createReportProvider>>,
    {appId: string; data: ReportProviderCreateRequest}
  > = (props) => {
    const {appId, data} = props ?? {};

    return createReportProvider(appId, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type CreateReportProviderMutationResult = NonNullable<
  Awaited<ReturnType<typeof createReportProvider>>
>;
export type CreateReportProviderMutationBody = ReportProviderCreateRequest;
export type CreateReportProviderMutationError = unknown;

/**
 * @summary Î¶¨Ìè¨Ìä∏ Îß§Ï≤¥ ÏÉùÏÑ±
 */
export const useCreateReportProvider = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createReportProvider>>,
      TError,
      {appId: string; data: ReportProviderCreateRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createReportProvider>>,
  TError,
  {appId: string; data: ReportProviderCreateRequest},
  TContext
> => {
  const mutationOptions = getCreateReportProviderMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary ÌôòÏú® Ï†ÄÏû•
 */
export const getSaveExchangeRateUrl = () => {
  return `/admin/api/reports/exchange-rate`;
};

export const saveExchangeRate = async (
  options?: RequestInit,
): Promise<EmptyResponse> => {
  return customFetch<EmptyResponse>(getSaveExchangeRateUrl(), {
    ...options,
    method: 'POST',
  });
};

export const getSaveExchangeRateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof saveExchangeRate>>,
    TError,
    void,
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof saveExchangeRate>>,
  TError,
  void,
  TContext
> => {
  const mutationKey = ['saveExchangeRate'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof saveExchangeRate>>,
    void
  > = () => {
    return saveExchangeRate(requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type SaveExchangeRateMutationResult = NonNullable<
  Awaited<ReturnType<typeof saveExchangeRate>>
>;

export type SaveExchangeRateMutationError = unknown;

/**
 * @summary ÌôòÏú® Ï†ÄÏû•
 */
export const useSaveExchangeRate = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof saveExchangeRate>>,
      TError,
      void,
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof saveExchangeRate>>,
  TError,
  void,
  TContext
> => {
  const mutationOptions = getSaveExchangeRateMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Î¶¨Ìè¨Ìä∏ ÌÜµÍ≥Ñ Ï°∞Ìöå
 */
export const getGetReportStatsUrl = (
  appId: string,
  params?: GetReportStatsParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/admin/api/reports-stats/${appId}?${stringifiedParams}`
    : `/admin/api/reports-stats/${appId}`;
};

export const getReportStats = async (
  appId: string,
  params?: GetReportStatsParams,
  options?: RequestInit,
): Promise<ReportStatsResponse> => {
  return customFetch<ReportStatsResponse>(getGetReportStatsUrl(appId, params), {
    ...options,
    method: 'GET',
  });
};

export const getGetReportStatsQueryKey = (
  appId: string,
  params?: GetReportStatsParams,
) => {
  return [
    `/admin/api/reports-stats/${appId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetReportStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof getReportStats>>,
  TError = unknown,
>(
  appId: string,
  params?: GetReportStatsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getReportStats>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetReportStatsQueryKey(appId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getReportStats>>> = ({
    signal,
  }) => getReportStats(appId, params, {signal, ...requestOptions});

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getReportStats>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetReportStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReportStats>>
>;
export type GetReportStatsQueryError = unknown;

export function useGetReportStats<
  TData = Awaited<ReturnType<typeof getReportStats>>,
  TError = unknown,
>(
  appId: string,
  params: undefined | GetReportStatsParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getReportStats>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReportStats>>,
          TError,
          Awaited<ReturnType<typeof getReportStats>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetReportStats<
  TData = Awaited<ReturnType<typeof getReportStats>>,
  TError = unknown,
>(
  appId: string,
  params?: GetReportStatsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getReportStats>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReportStats>>,
          TError,
          Awaited<ReturnType<typeof getReportStats>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useGetReportStats<
  TData = Awaited<ReturnType<typeof getReportStats>>,
  TError = unknown,
>(
  appId: string,
  params?: GetReportStatsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getReportStats>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary Î¶¨Ìè¨Ìä∏ ÌÜµÍ≥Ñ Ï°∞Ìöå
 */

export function useGetReportStats<
  TData = Awaited<ReturnType<typeof getReportStats>>,
  TError = unknown,
>(
  appId: string,
  params?: GetReportStatsParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getReportStats>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetReportStatsQueryOptions(appId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetReportStatsSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getReportStats>>,
  TError = unknown,
>(
  appId: string,
  params?: GetReportStatsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetReportStatsQueryKey(appId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getReportStats>>> = ({
    signal,
  }) => getReportStats(appId, params, {signal, ...requestOptions});

  return {queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getReportStats>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetReportStatsSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReportStats>>
>;
export type GetReportStatsSuspenseQueryError = unknown;

export function useGetReportStatsSuspense<
  TData = Awaited<ReturnType<typeof getReportStats>>,
  TError = unknown,
>(
  appId: string,
  params: undefined | GetReportStatsParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetReportStatsSuspense<
  TData = Awaited<ReturnType<typeof getReportStats>>,
  TError = unknown,
>(
  appId: string,
  params?: GetReportStatsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetReportStatsSuspense<
  TData = Awaited<ReturnType<typeof getReportStats>>,
  TError = unknown,
>(
  appId: string,
  params?: GetReportStatsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Î¶¨Ìè¨Ìä∏ ÌÜµÍ≥Ñ Ï°∞Ìöå
 */

export function useGetReportStatsSuspense<
  TData = Awaited<ReturnType<typeof getReportStats>>,
  TError = unknown,
>(
  appId: string,
  params?: GetReportStatsParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportStats>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetReportStatsSuspenseQueryOptions(
    appId,
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Î¶¨Ìè¨Ìä∏ ÌÜµÍ≥Ñ ÏóëÏÖÄ Îã§Ïö¥Î°úÎìú
 */
export const getGetReportStatsExcelUrl = (
  appId: string,
  params?: GetReportStatsExcelParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/admin/api/reports-stats/${appId}/excel?${stringifiedParams}`
    : `/admin/api/reports-stats/${appId}/excel`;
};

export const getReportStatsExcel = async (
  appId: string,
  params?: GetReportStatsExcelParams,
  options?: RequestInit,
): Promise<ReportStatsExcelResponse> => {
  return customFetch<ReportStatsExcelResponse>(
    getGetReportStatsExcelUrl(appId, params),
    {
      ...options,
      method: 'GET',
    },
  );
};

export const getGetReportStatsExcelQueryKey = (
  appId: string,
  params?: GetReportStatsExcelParams,
) => {
  return [
    `/admin/api/reports-stats/${appId}/excel`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetReportStatsExcelQueryOptions = <
  TData = Awaited<ReturnType<typeof getReportStatsExcel>>,
  TError = unknown,
>(
  appId: string,
  params?: GetReportStatsExcelParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReportStatsExcel>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetReportStatsExcelQueryKey(appId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getReportStatsExcel>>
  > = ({signal}) =>
    getReportStatsExcel(appId, params, {signal, ...requestOptions});

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getReportStatsExcel>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetReportStatsExcelQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReportStatsExcel>>
>;
export type GetReportStatsExcelQueryError = unknown;

export function useGetReportStatsExcel<
  TData = Awaited<ReturnType<typeof getReportStatsExcel>>,
  TError = unknown,
>(
  appId: string,
  params: undefined | GetReportStatsExcelParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReportStatsExcel>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReportStatsExcel>>,
          TError,
          Awaited<ReturnType<typeof getReportStatsExcel>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetReportStatsExcel<
  TData = Awaited<ReturnType<typeof getReportStatsExcel>>,
  TError = unknown,
>(
  appId: string,
  params?: GetReportStatsExcelParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReportStatsExcel>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getReportStatsExcel>>,
          TError,
          Awaited<ReturnType<typeof getReportStatsExcel>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useGetReportStatsExcel<
  TData = Awaited<ReturnType<typeof getReportStatsExcel>>,
  TError = unknown,
>(
  appId: string,
  params?: GetReportStatsExcelParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReportStatsExcel>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary Î¶¨Ìè¨Ìä∏ ÌÜµÍ≥Ñ ÏóëÏÖÄ Îã§Ïö¥Î°úÎìú
 */

export function useGetReportStatsExcel<
  TData = Awaited<ReturnType<typeof getReportStatsExcel>>,
  TError = unknown,
>(
  appId: string,
  params?: GetReportStatsExcelParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getReportStatsExcel>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetReportStatsExcelQueryOptions(
    appId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetReportStatsExcelSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getReportStatsExcel>>,
  TError = unknown,
>(
  appId: string,
  params?: GetReportStatsExcelParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportStatsExcel>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetReportStatsExcelQueryKey(appId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getReportStatsExcel>>
  > = ({signal}) =>
    getReportStatsExcel(appId, params, {signal, ...requestOptions});

  return {queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getReportStatsExcel>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetReportStatsExcelSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getReportStatsExcel>>
>;
export type GetReportStatsExcelSuspenseQueryError = unknown;

export function useGetReportStatsExcelSuspense<
  TData = Awaited<ReturnType<typeof getReportStatsExcel>>,
  TError = unknown,
>(
  appId: string,
  params: undefined | GetReportStatsExcelParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportStatsExcel>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetReportStatsExcelSuspense<
  TData = Awaited<ReturnType<typeof getReportStatsExcel>>,
  TError = unknown,
>(
  appId: string,
  params?: GetReportStatsExcelParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportStatsExcel>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetReportStatsExcelSuspense<
  TData = Awaited<ReturnType<typeof getReportStatsExcel>>,
  TError = unknown,
>(
  appId: string,
  params?: GetReportStatsExcelParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportStatsExcel>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Î¶¨Ìè¨Ìä∏ ÌÜµÍ≥Ñ ÏóëÏÖÄ Îã§Ïö¥Î°úÎìú
 */

export function useGetReportStatsExcelSuspense<
  TData = Awaited<ReturnType<typeof getReportStatsExcel>>,
  TError = unknown,
>(
  appId: string,
  params?: GetReportStatsExcelParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getReportStatsExcel>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetReportStatsExcelSuspenseQueryOptions(
    appId,
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Ïï± Î≥Ñ Î™®Îì† Ïù¥Î≤§Ìä∏ ÏàúÏùëÎ™® ÏàòÏùò Ï¥ù Ìï©Í≥ÑÎ•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Î™®Îì† Ïù¥Î≤§Ìä∏ ÏàúÏùëÎ™® Ïàò Ï°∞Ìöå
 */
export const getGetEventEntryStatsReportUrl = (
  appId: string,
  params: GetEventEntryStatsReportParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/admin/api/event-entry-stats-report/${appId}?${stringifiedParams}`
    : `/admin/api/event-entry-stats-report/${appId}`;
};

export const getEventEntryStatsReport = async (
  appId: string,
  params: GetEventEntryStatsReportParams,
  options?: RequestInit,
): Promise<EventEntryStatsReportResponse> => {
  return customFetch<EventEntryStatsReportResponse>(
    getGetEventEntryStatsReportUrl(appId, params),
    {
      ...options,
      method: 'GET',
    },
  );
};

export const getGetEventEntryStatsReportQueryKey = (
  appId: string,
  params: GetEventEntryStatsReportParams,
) => {
  return [
    `/admin/api/event-entry-stats-report/${appId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetEventEntryStatsReportQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventEntryStatsReport>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsReportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsReport>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetEventEntryStatsReportQueryKey(appId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEventEntryStatsReport>>
  > = ({signal}) =>
    getEventEntryStatsReport(appId, params, {signal, ...requestOptions});

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getEventEntryStatsReport>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetEventEntryStatsReportQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEventEntryStatsReport>>
>;
export type GetEventEntryStatsReportQueryError = unknown;

export function useGetEventEntryStatsReport<
  TData = Awaited<ReturnType<typeof getEventEntryStatsReport>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsReportParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsReport>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventEntryStatsReport>>,
          TError,
          Awaited<ReturnType<typeof getEventEntryStatsReport>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEventEntryStatsReport<
  TData = Awaited<ReturnType<typeof getEventEntryStatsReport>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsReportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsReport>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getEventEntryStatsReport>>,
          TError,
          Awaited<ReturnType<typeof getEventEntryStatsReport>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useGetEventEntryStatsReport<
  TData = Awaited<ReturnType<typeof getEventEntryStatsReport>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsReportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsReport>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary Î™®Îì† Ïù¥Î≤§Ìä∏ ÏàúÏùëÎ™® Ïàò Ï°∞Ìöå
 */

export function useGetEventEntryStatsReport<
  TData = Awaited<ReturnType<typeof getEventEntryStatsReport>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsReportParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsReport>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetEventEntryStatsReportQueryOptions(
    appId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetEventEntryStatsReportSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getEventEntryStatsReport>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsReportParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsReport>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetEventEntryStatsReportQueryKey(appId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getEventEntryStatsReport>>
  > = ({signal}) =>
    getEventEntryStatsReport(appId, params, {signal, ...requestOptions});

  return {queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getEventEntryStatsReport>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetEventEntryStatsReportSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getEventEntryStatsReport>>
>;
export type GetEventEntryStatsReportSuspenseQueryError = unknown;

export function useGetEventEntryStatsReportSuspense<
  TData = Awaited<ReturnType<typeof getEventEntryStatsReport>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsReportParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsReport>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEventEntryStatsReportSuspense<
  TData = Awaited<ReturnType<typeof getEventEntryStatsReport>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsReportParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsReport>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetEventEntryStatsReportSuspense<
  TData = Awaited<ReturnType<typeof getEventEntryStatsReport>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsReportParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsReport>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Î™®Îì† Ïù¥Î≤§Ìä∏ ÏàúÏùëÎ™® Ïàò Ï°∞Ìöå
 */

export function useGetEventEntryStatsReportSuspense<
  TData = Awaited<ReturnType<typeof getEventEntryStatsReport>>,
  TError = unknown,
>(
  appId: string,
  params: GetEventEntryStatsReportParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getEventEntryStatsReport>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetEventEntryStatsReportSuspenseQueryOptions(
    appId,
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
