/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * ÌïÄÌîåÎ°úÏö∞ ÌîÑÎ°úÎ™®ÏÖò: Admin API
 * ÌïÄÌîåÎ°úÏö∞ ÌîÑÎ°úÎ™®ÏÖò: Admin API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import {useMutation, useQuery, useSuspenseQuery} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';

import type {
  AdminAuthListAllUsersParams,
  AdminAuthListParams,
  AppAdminRegistrationRequest,
  LoginRequest,
  LoginResponse,
  PasswordResetRequest,
  UserInfoPageResponse,
  UserInfoResponse,
  UserInfoUpdateRequest,
  UserMyInfoUpdateRequest,
  UserRegistrationRequest,
  UserRoleUpdateRequest,
  UserStatusUpdateRequest,
} from '.././model';

import {customFetch} from '../../custom-fetch.client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * 
        SUPER_ADMIN, Ìï¥Îãπ Ïï± ADMIN Í¥ÄÎ¶¨ÏûêÎßå Í∞ÄÎä•
        
 * @summary ÏÇ¨Ïö©Ïûê ÎπÑÌôúÏÑ±Ìôî/ÌôúÏÑ±Ìôî ÏÉÅÌÉú Î≥ÄÍ≤Ω(workspace)
 */
export const getAdminAuthUpdateUserStatusUrl = (
  appId: string,
  userId: string,
) => {
  return `/admin/api/auth/${appId}/users/${userId}/status`;
};

export const adminAuthUpdateUserStatus = async (
  appId: string,
  userId: string,
  userStatusUpdateRequest: UserStatusUpdateRequest,
  options?: RequestInit,
): Promise<UserInfoResponse> => {
  return customFetch<UserInfoResponse>(
    getAdminAuthUpdateUserStatusUrl(appId, userId),
    {
      ...options,
      method: 'PUT',
      headers: {'Content-Type': 'application/json', ...options?.headers},
      body: JSON.stringify(userStatusUpdateRequest),
    },
  );
};

export const getAdminAuthUpdateUserStatusMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAuthUpdateUserStatus>>,
    TError,
    {appId: string; userId: string; data: UserStatusUpdateRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminAuthUpdateUserStatus>>,
  TError,
  {appId: string; userId: string; data: UserStatusUpdateRequest},
  TContext
> => {
  const mutationKey = ['adminAuthUpdateUserStatus'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminAuthUpdateUserStatus>>,
    {appId: string; userId: string; data: UserStatusUpdateRequest}
  > = (props) => {
    const {appId, userId, data} = props ?? {};

    return adminAuthUpdateUserStatus(appId, userId, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type AdminAuthUpdateUserStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAuthUpdateUserStatus>>
>;
export type AdminAuthUpdateUserStatusMutationBody = UserStatusUpdateRequest;
export type AdminAuthUpdateUserStatusMutationError = unknown;

/**
 * @summary ÏÇ¨Ïö©Ïûê ÎπÑÌôúÏÑ±Ìôî/ÌôúÏÑ±Ìôî ÏÉÅÌÉú Î≥ÄÍ≤Ω(workspace)
 */
export const useAdminAuthUpdateUserStatus = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminAuthUpdateUserStatus>>,
      TError,
      {appId: string; userId: string; data: UserStatusUpdateRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminAuthUpdateUserStatus>>,
  TError,
  {appId: string; userId: string; data: UserStatusUpdateRequest},
  TContext
> => {
  const mutationOptions = getAdminAuthUpdateUserStatusMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 
            SUPER_ADMIN, Ìï¥Îãπ Ïï± ADMIN Í¥ÄÎ¶¨ÏûêÎßå Í∞ÄÎä•
        
 * @summary Ïï± ÏÇ¨Ïö©Ïûê Í∂åÌïú ÏàòÏ†ï(workspace)
 */
export const getAdminAuthUpdateUserRoleUrl = (
  appId: string,
  userId: string,
) => {
  return `/admin/api/auth/${appId}/users/${userId}/role`;
};

export const adminAuthUpdateUserRole = async (
  appId: string,
  userId: string,
  userRoleUpdateRequest: UserRoleUpdateRequest,
  options?: RequestInit,
): Promise<UserInfoResponse> => {
  return customFetch<UserInfoResponse>(
    getAdminAuthUpdateUserRoleUrl(appId, userId),
    {
      ...options,
      method: 'PUT',
      headers: {'Content-Type': 'application/json', ...options?.headers},
      body: JSON.stringify(userRoleUpdateRequest),
    },
  );
};

export const getAdminAuthUpdateUserRoleMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAuthUpdateUserRole>>,
    TError,
    {appId: string; userId: string; data: UserRoleUpdateRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminAuthUpdateUserRole>>,
  TError,
  {appId: string; userId: string; data: UserRoleUpdateRequest},
  TContext
> => {
  const mutationKey = ['adminAuthUpdateUserRole'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminAuthUpdateUserRole>>,
    {appId: string; userId: string; data: UserRoleUpdateRequest}
  > = (props) => {
    const {appId, userId, data} = props ?? {};

    return adminAuthUpdateUserRole(appId, userId, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type AdminAuthUpdateUserRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAuthUpdateUserRole>>
>;
export type AdminAuthUpdateUserRoleMutationBody = UserRoleUpdateRequest;
export type AdminAuthUpdateUserRoleMutationError = unknown;

/**
 * @summary Ïï± ÏÇ¨Ïö©Ïûê Í∂åÌïú ÏàòÏ†ï(workspace)
 */
export const useAdminAuthUpdateUserRole = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminAuthUpdateUserRole>>,
      TError,
      {appId: string; userId: string; data: UserRoleUpdateRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminAuthUpdateUserRole>>,
  TError,
  {appId: string; userId: string; data: UserRoleUpdateRequest},
  TContext
> => {
  const mutationOptions = getAdminAuthUpdateUserRoleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 
    SUPER_ADMIN, Ìï¥Îãπ Ïï± ADMIN Í¥ÄÎ¶¨ÏûêÎßå Í∞ÄÎä•. 
    ÏÇ¨Ïö©Ïûê ÎπÑÎ∞ÄÎ≤àÌò∏Î•º ÏûÑÏãú ÎπÑÎ∞ÄÎ≤àÌò∏Î°ú Ï¥àÍ∏∞ÌôîÌï©ÎãàÎã§.
    
 * @summary ÏÇ¨Ïö©Ïûê ÎπÑÎ∞ÄÎ≤àÌò∏ Ï¥àÍ∏∞Ìôî(workspace)
 */
export const getAdminAuthResetPasswordUrl = (appId: string, userId: string) => {
  return `/admin/api/auth/${appId}/users/${userId}/reset-password`;
};

export const adminAuthResetPassword = async (
  appId: string,
  userId: string,
  passwordResetRequest: PasswordResetRequest,
  options?: RequestInit,
): Promise<UserInfoResponse> => {
  return customFetch<UserInfoResponse>(
    getAdminAuthResetPasswordUrl(appId, userId),
    {
      ...options,
      method: 'PUT',
      headers: {'Content-Type': 'application/json', ...options?.headers},
      body: JSON.stringify(passwordResetRequest),
    },
  );
};

export const getAdminAuthResetPasswordMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAuthResetPassword>>,
    TError,
    {appId: string; userId: string; data: PasswordResetRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminAuthResetPassword>>,
  TError,
  {appId: string; userId: string; data: PasswordResetRequest},
  TContext
> => {
  const mutationKey = ['adminAuthResetPassword'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminAuthResetPassword>>,
    {appId: string; userId: string; data: PasswordResetRequest}
  > = (props) => {
    const {appId, userId, data} = props ?? {};

    return adminAuthResetPassword(appId, userId, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type AdminAuthResetPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAuthResetPassword>>
>;
export type AdminAuthResetPasswordMutationBody = PasswordResetRequest;
export type AdminAuthResetPasswordMutationError = unknown;

/**
 * @summary ÏÇ¨Ïö©Ïûê ÎπÑÎ∞ÄÎ≤àÌò∏ Ï¥àÍ∏∞Ìôî(workspace)
 */
export const useAdminAuthResetPassword = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminAuthResetPassword>>,
      TError,
      {appId: string; userId: string; data: PasswordResetRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminAuthResetPassword>>,
  TError,
  {appId: string; userId: string; data: PasswordResetRequest},
  TContext
> => {
  const mutationOptions = getAdminAuthResetPasswordMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 
        SUPER_ADMIN, Ìï¥Îãπ Ïï± ADMIN Í¥ÄÎ¶¨ÏûêÎßå Í∞ÄÎä•
        
 * @summary ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏàòÏ†ï(workspace)
 */
export const getAdminAuthUpdateUserInfoUrl = (
  appId: string,
  userId: string,
) => {
  return `/admin/api/auth/${appId}/users/${userId}/info`;
};

export const adminAuthUpdateUserInfo = async (
  appId: string,
  userId: string,
  userInfoUpdateRequest: UserInfoUpdateRequest,
  options?: RequestInit,
): Promise<UserInfoResponse> => {
  return customFetch<UserInfoResponse>(
    getAdminAuthUpdateUserInfoUrl(appId, userId),
    {
      ...options,
      method: 'PUT',
      headers: {'Content-Type': 'application/json', ...options?.headers},
      body: JSON.stringify(userInfoUpdateRequest),
    },
  );
};

export const getAdminAuthUpdateUserInfoMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAuthUpdateUserInfo>>,
    TError,
    {appId: string; userId: string; data: UserInfoUpdateRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminAuthUpdateUserInfo>>,
  TError,
  {appId: string; userId: string; data: UserInfoUpdateRequest},
  TContext
> => {
  const mutationKey = ['adminAuthUpdateUserInfo'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminAuthUpdateUserInfo>>,
    {appId: string; userId: string; data: UserInfoUpdateRequest}
  > = (props) => {
    const {appId, userId, data} = props ?? {};

    return adminAuthUpdateUserInfo(appId, userId, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type AdminAuthUpdateUserInfoMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAuthUpdateUserInfo>>
>;
export type AdminAuthUpdateUserInfoMutationBody = UserInfoUpdateRequest;
export type AdminAuthUpdateUserInfoMutationError = unknown;

/**
 * @summary ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏàòÏ†ï(workspace)
 */
export const useAdminAuthUpdateUserInfo = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminAuthUpdateUserInfo>>,
      TError,
      {appId: string; userId: string; data: UserInfoUpdateRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminAuthUpdateUserInfo>>,
  TError,
  {appId: string; userId: string; data: UserInfoUpdateRequest},
  TContext
> => {
  const mutationOptions = getAdminAuthUpdateUserInfoMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * ÏûêÏã†Ïùò ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§. SUPER_ADMINÏùºÎïê appIdÎ•º Î¨¥ÏãúÌï©ÎãàÎã§. (appId=superÎ°ú ÎÑòÍ≤®Ï£ºÏÑ∏Ïöî)
 * @summary ÏûêÏã†Ïùò ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå
 */
export const getAdminAuthGetMyInfoUrl = (appId: string) => {
  return `/admin/api/auth/${appId}/users/my-info`;
};

export const adminAuthGetMyInfo = async (
  appId: string,
  options?: RequestInit,
): Promise<UserInfoResponse> => {
  return customFetch<UserInfoResponse>(getAdminAuthGetMyInfoUrl(appId), {
    ...options,
    method: 'GET',
  });
};

export const getAdminAuthGetMyInfoQueryKey = (appId: string) => {
  return [`/admin/api/auth/${appId}/users/my-info`] as const;
};

export const getAdminAuthGetMyInfoQueryOptions = <
  TData = Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminAuthGetMyInfoQueryKey(appId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminAuthGetMyInfo>>
  > = ({signal}) => adminAuthGetMyInfo(appId, {signal, ...requestOptions});

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type AdminAuthGetMyInfoQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminAuthGetMyInfo>>
>;
export type AdminAuthGetMyInfoQueryError = unknown;

export function useAdminAuthGetMyInfo<
  TData = Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
  TError = unknown,
>(
  appId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
          TError,
          Awaited<ReturnType<typeof adminAuthGetMyInfo>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminAuthGetMyInfo<
  TData = Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
          TError,
          Awaited<ReturnType<typeof adminAuthGetMyInfo>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useAdminAuthGetMyInfo<
  TData = Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary ÏûêÏã†Ïùò ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå
 */

export function useAdminAuthGetMyInfo<
  TData = Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminAuthGetMyInfoQueryOptions(appId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAdminAuthGetMyInfoSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminAuthGetMyInfoQueryKey(appId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminAuthGetMyInfo>>
  > = ({signal}) => adminAuthGetMyInfo(appId, {signal, ...requestOptions});

  return {queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type AdminAuthGetMyInfoSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminAuthGetMyInfo>>
>;
export type AdminAuthGetMyInfoSuspenseQueryError = unknown;

export function useAdminAuthGetMyInfoSuspense<
  TData = Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
  TError = unknown,
>(
  appId: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminAuthGetMyInfoSuspense<
  TData = Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminAuthGetMyInfoSuspense<
  TData = Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary ÏûêÏã†Ïùò ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï°∞Ìöå
 */

export function useAdminAuthGetMyInfoSuspense<
  TData = Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
  TError = unknown,
>(
  appId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetMyInfo>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminAuthGetMyInfoSuspenseQueryOptions(
    appId,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÏûêÏã†Ïùò Ï†ïÎ≥¥Î•º ÏàòÏ†ï. SUPER_ADMINÏùºÎïê appIdÎ•º Î¨¥ÏãúÌï©ÎãàÎã§. (appId=superÎ°ú ÎÑòÍ≤®Ï£ºÏÑ∏Ïöî)
 * @summary ÏûêÏã†Ïùò ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const getAdminAuthUpdateUserMyInfoUrl = (appId: string) => {
  return `/admin/api/auth/${appId}/users/my-info`;
};

export const adminAuthUpdateUserMyInfo = async (
  appId: string,
  userMyInfoUpdateRequest: UserMyInfoUpdateRequest,
  options?: RequestInit,
): Promise<UserInfoResponse> => {
  return customFetch<UserInfoResponse>(getAdminAuthUpdateUserMyInfoUrl(appId), {
    ...options,
    method: 'PUT',
    headers: {'Content-Type': 'application/json', ...options?.headers},
    body: JSON.stringify(userMyInfoUpdateRequest),
  });
};

export const getAdminAuthUpdateUserMyInfoMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAuthUpdateUserMyInfo>>,
    TError,
    {appId: string; data: UserMyInfoUpdateRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminAuthUpdateUserMyInfo>>,
  TError,
  {appId: string; data: UserMyInfoUpdateRequest},
  TContext
> => {
  const mutationKey = ['adminAuthUpdateUserMyInfo'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminAuthUpdateUserMyInfo>>,
    {appId: string; data: UserMyInfoUpdateRequest}
  > = (props) => {
    const {appId, data} = props ?? {};

    return adminAuthUpdateUserMyInfo(appId, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type AdminAuthUpdateUserMyInfoMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAuthUpdateUserMyInfo>>
>;
export type AdminAuthUpdateUserMyInfoMutationBody = UserMyInfoUpdateRequest;
export type AdminAuthUpdateUserMyInfoMutationError = unknown;

/**
 * @summary ÏûêÏã†Ïùò ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÏàòÏ†ï
 */
export const useAdminAuthUpdateUserMyInfo = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminAuthUpdateUserMyInfo>>,
      TError,
      {appId: string; data: UserMyInfoUpdateRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminAuthUpdateUserMyInfo>>,
  TError,
  {appId: string; data: UserMyInfoUpdateRequest},
  TContext
> => {
  const mutationOptions = getAdminAuthUpdateUserMyInfoMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 
        SUPER_ADMIN, Ìï¥Îãπ Ïï± ADMIN Í¥ÄÎ¶¨ÏûêÎßå Í∞ÄÎä•
        
 * @summary Ïï± Í¥ÄÎ¶¨ÏûêÎì±Î°ù(workspace)
 */
export const getAdminAuthRegisterAppUrl = (appId: string) => {
  return `/admin/api/auth/${appId}/register`;
};

export const adminAuthRegisterApp = async (
  appId: string,
  appAdminRegistrationRequest: AppAdminRegistrationRequest,
  options?: RequestInit,
): Promise<UserInfoResponse> => {
  return customFetch<UserInfoResponse>(getAdminAuthRegisterAppUrl(appId), {
    ...options,
    method: 'POST',
    headers: {'Content-Type': 'application/json', ...options?.headers},
    body: JSON.stringify(appAdminRegistrationRequest),
  });
};

export const getAdminAuthRegisterAppMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAuthRegisterApp>>,
    TError,
    {appId: string; data: AppAdminRegistrationRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminAuthRegisterApp>>,
  TError,
  {appId: string; data: AppAdminRegistrationRequest},
  TContext
> => {
  const mutationKey = ['adminAuthRegisterApp'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminAuthRegisterApp>>,
    {appId: string; data: AppAdminRegistrationRequest}
  > = (props) => {
    const {appId, data} = props ?? {};

    return adminAuthRegisterApp(appId, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type AdminAuthRegisterAppMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAuthRegisterApp>>
>;
export type AdminAuthRegisterAppMutationBody = AppAdminRegistrationRequest;
export type AdminAuthRegisterAppMutationError = unknown;

/**
 * @summary Ïï± Í¥ÄÎ¶¨ÏûêÎì±Î°ù(workspace)
 */
export const useAdminAuthRegisterApp = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminAuthRegisterApp>>,
      TError,
      {appId: string; data: AppAdminRegistrationRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminAuthRegisterApp>>,
  TError,
  {appId: string; data: AppAdminRegistrationRequest},
  TContext
> => {
  const mutationOptions = getAdminAuthRegisterAppMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 
        SUPER_ADMINÎßå Í∞ÄÎä•
        
 * @summary Í¥ÄÎ¶¨ÏûêÎì±Î°ù(superspace)
 */
export const getAdminAuthRegisterUrl = () => {
  return `/admin/api/auth/register`;
};

export const adminAuthRegister = async (
  userRegistrationRequest: UserRegistrationRequest,
  options?: RequestInit,
): Promise<UserInfoResponse> => {
  return customFetch<UserInfoResponse>(getAdminAuthRegisterUrl(), {
    ...options,
    method: 'POST',
    headers: {'Content-Type': 'application/json', ...options?.headers},
    body: JSON.stringify(userRegistrationRequest),
  });
};

export const getAdminAuthRegisterMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAuthRegister>>,
    TError,
    {data: UserRegistrationRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminAuthRegister>>,
  TError,
  {data: UserRegistrationRequest},
  TContext
> => {
  const mutationKey = ['adminAuthRegister'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminAuthRegister>>,
    {data: UserRegistrationRequest}
  > = (props) => {
    const {data} = props ?? {};

    return adminAuthRegister(data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type AdminAuthRegisterMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAuthRegister>>
>;
export type AdminAuthRegisterMutationBody = UserRegistrationRequest;
export type AdminAuthRegisterMutationError = unknown;

/**
 * @summary Í¥ÄÎ¶¨ÏûêÎì±Î°ù(superspace)
 */
export const useAdminAuthRegister = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminAuthRegister>>,
      TError,
      {data: UserRegistrationRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminAuthRegister>>,
  TError,
  {data: UserRegistrationRequest},
  TContext
> => {
  const mutationOptions = getAdminAuthRegisterMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * 
        Í¥ÄÎ¶¨Ïûê Î°úÍ∑∏Ïù∏
        
 * @summary Í¥ÄÎ¶¨Ïûê Î°úÍ∑∏Ïù∏
 */
export const getAdminAuthLoginUrl = () => {
  return `/admin/api/auth/login`;
};

export const adminAuthLogin = async (
  loginRequest: LoginRequest,
  options?: RequestInit,
): Promise<LoginResponse> => {
  return customFetch<LoginResponse>(getAdminAuthLoginUrl(), {
    ...options,
    method: 'POST',
    headers: {'Content-Type': 'application/json', ...options?.headers},
    body: JSON.stringify(loginRequest),
  });
};

export const getAdminAuthLoginMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminAuthLogin>>,
    TError,
    {data: LoginRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof adminAuthLogin>>,
  TError,
  {data: LoginRequest},
  TContext
> => {
  const mutationKey = ['adminAuthLogin'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminAuthLogin>>,
    {data: LoginRequest}
  > = (props) => {
    const {data} = props ?? {};

    return adminAuthLogin(data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type AdminAuthLoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminAuthLogin>>
>;
export type AdminAuthLoginMutationBody = LoginRequest;
export type AdminAuthLoginMutationError = unknown;

/**
 * @summary Í¥ÄÎ¶¨Ïûê Î°úÍ∑∏Ïù∏
 */
export const useAdminAuthLogin = <TError = unknown, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof adminAuthLogin>>,
      TError,
      {data: LoginRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof adminAuthLogin>>,
  TError,
  {data: LoginRequest},
  TContext
> => {
  const mutationOptions = getAdminAuthLoginMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * )
        SUPER_ADMIN, Ìï¥Îãπ Ïï± ADMIN Í¥ÄÎ¶¨ÏûêÎßå Í∞ÄÎä•
        
 * @summary Ïï± Î≥Ñ ÌäπÏ†ï ÏÇ¨Ïö©Ïûê ÏÉÅÏÑ∏Ï†ïÎ≥¥ Ï°∞Ìöå(workspace)
 */
export const getAdminAuthGetUserUrl = (appId: string, userId: string) => {
  return `/admin/api/auth/${appId}/${userId}`;
};

export const adminAuthGetUser = async (
  appId: string,
  userId: string,
  options?: RequestInit,
): Promise<UserInfoResponse> => {
  return customFetch<UserInfoResponse>(getAdminAuthGetUserUrl(appId, userId), {
    ...options,
    method: 'GET',
  });
};

export const getAdminAuthGetUserQueryKey = (appId: string, userId: string) => {
  return [`/admin/api/auth/${appId}/${userId}`] as const;
};

export const getAdminAuthGetUserQueryOptions = <
  TData = Awaited<ReturnType<typeof adminAuthGetUser>>,
  TError = unknown,
>(
  appId: string,
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminAuthGetUserQueryKey(appId, userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminAuthGetUser>>
  > = ({signal}) =>
    adminAuthGetUser(appId, userId, {signal, ...requestOptions});

  return {
    queryKey,
    queryFn,
    enabled: !!(appId && userId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adminAuthGetUser>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type AdminAuthGetUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminAuthGetUser>>
>;
export type AdminAuthGetUserQueryError = unknown;

export function useAdminAuthGetUser<
  TData = Awaited<ReturnType<typeof adminAuthGetUser>>,
  TError = unknown,
>(
  appId: string,
  userId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetUser>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminAuthGetUser>>,
          TError,
          Awaited<ReturnType<typeof adminAuthGetUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminAuthGetUser<
  TData = Awaited<ReturnType<typeof adminAuthGetUser>>,
  TError = unknown,
>(
  appId: string,
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetUser>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminAuthGetUser>>,
          TError,
          Awaited<ReturnType<typeof adminAuthGetUser>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useAdminAuthGetUser<
  TData = Awaited<ReturnType<typeof adminAuthGetUser>>,
  TError = unknown,
>(
  appId: string,
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary Ïï± Î≥Ñ ÌäπÏ†ï ÏÇ¨Ïö©Ïûê ÏÉÅÏÑ∏Ï†ïÎ≥¥ Ï°∞Ìöå(workspace)
 */

export function useAdminAuthGetUser<
  TData = Awaited<ReturnType<typeof adminAuthGetUser>>,
  TError = unknown,
>(
  appId: string,
  userId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminAuthGetUserQueryOptions(appId, userId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAdminAuthGetUserSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof adminAuthGetUser>>,
  TError = unknown,
>(
  appId: string,
  userId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminAuthGetUserQueryKey(appId, userId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminAuthGetUser>>
  > = ({signal}) =>
    adminAuthGetUser(appId, userId, {signal, ...requestOptions});

  return {queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof adminAuthGetUser>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type AdminAuthGetUserSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminAuthGetUser>>
>;
export type AdminAuthGetUserSuspenseQueryError = unknown;

export function useAdminAuthGetUserSuspense<
  TData = Awaited<ReturnType<typeof adminAuthGetUser>>,
  TError = unknown,
>(
  appId: string,
  userId: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminAuthGetUserSuspense<
  TData = Awaited<ReturnType<typeof adminAuthGetUser>>,
  TError = unknown,
>(
  appId: string,
  userId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminAuthGetUserSuspense<
  TData = Awaited<ReturnType<typeof adminAuthGetUser>>,
  TError = unknown,
>(
  appId: string,
  userId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ïï± Î≥Ñ ÌäπÏ†ï ÏÇ¨Ïö©Ïûê ÏÉÅÏÑ∏Ï†ïÎ≥¥ Ï°∞Ìöå(workspace)
 */

export function useAdminAuthGetUserSuspense<
  TData = Awaited<ReturnType<typeof adminAuthGetUser>>,
  TError = unknown,
>(
  appId: string,
  userId: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthGetUser>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminAuthGetUserSuspenseQueryOptions(
    appId,
    userId,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 
        SUPER_ADMIN, Ìï¥Îãπ Ïï± ADMIN Í¥ÄÎ¶¨ÏûêÎßå Í∞ÄÎä•
        
 * @summary Ïï± Î≥Ñ ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå(workspace)
 */
export const getAdminAuthListUrl = (
  appId: string,
  params?: AdminAuthListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/admin/api/auth/${appId}/list?${stringifiedParams}`
    : `/admin/api/auth/${appId}/list`;
};

export const adminAuthList = async (
  appId: string,
  params?: AdminAuthListParams,
  options?: RequestInit,
): Promise<UserInfoPageResponse> => {
  return customFetch<UserInfoPageResponse>(getAdminAuthListUrl(appId, params), {
    ...options,
    method: 'GET',
  });
};

export const getAdminAuthListQueryKey = (
  appId: string,
  params?: AdminAuthListParams,
) => {
  return [
    `/admin/api/auth/${appId}/list`,
    ...(params ? [params] : []),
  ] as const;
};

export const getAdminAuthListQueryOptions = <
  TData = Awaited<ReturnType<typeof adminAuthList>>,
  TError = unknown,
>(
  appId: string,
  params?: AdminAuthListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminAuthList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminAuthListQueryKey(appId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminAuthList>>> = ({
    signal,
  }) => adminAuthList(appId, params, {signal, ...requestOptions});

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof adminAuthList>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type AdminAuthListQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminAuthList>>
>;
export type AdminAuthListQueryError = unknown;

export function useAdminAuthList<
  TData = Awaited<ReturnType<typeof adminAuthList>>,
  TError = unknown,
>(
  appId: string,
  params: undefined | AdminAuthListParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminAuthList>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminAuthList>>,
          TError,
          Awaited<ReturnType<typeof adminAuthList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminAuthList<
  TData = Awaited<ReturnType<typeof adminAuthList>>,
  TError = unknown,
>(
  appId: string,
  params?: AdminAuthListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminAuthList>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminAuthList>>,
          TError,
          Awaited<ReturnType<typeof adminAuthList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useAdminAuthList<
  TData = Awaited<ReturnType<typeof adminAuthList>>,
  TError = unknown,
>(
  appId: string,
  params?: AdminAuthListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminAuthList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary Ïï± Î≥Ñ ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå(workspace)
 */

export function useAdminAuthList<
  TData = Awaited<ReturnType<typeof adminAuthList>>,
  TError = unknown,
>(
  appId: string,
  params?: AdminAuthListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof adminAuthList>>, TError, TData>
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminAuthListQueryOptions(appId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAdminAuthListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof adminAuthList>>,
  TError = unknown,
>(
  appId: string,
  params?: AdminAuthListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminAuthListQueryKey(appId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof adminAuthList>>> = ({
    signal,
  }) => adminAuthList(appId, params, {signal, ...requestOptions});

  return {queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof adminAuthList>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type AdminAuthListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminAuthList>>
>;
export type AdminAuthListSuspenseQueryError = unknown;

export function useAdminAuthListSuspense<
  TData = Awaited<ReturnType<typeof adminAuthList>>,
  TError = unknown,
>(
  appId: string,
  params: undefined | AdminAuthListParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminAuthListSuspense<
  TData = Awaited<ReturnType<typeof adminAuthList>>,
  TError = unknown,
>(
  appId: string,
  params?: AdminAuthListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminAuthListSuspense<
  TData = Awaited<ReturnType<typeof adminAuthList>>,
  TError = unknown,
>(
  appId: string,
  params?: AdminAuthListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ïï± Î≥Ñ ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå(workspace)
 */

export function useAdminAuthListSuspense<
  TData = Awaited<ReturnType<typeof adminAuthList>>,
  TError = unknown,
>(
  appId: string,
  params?: AdminAuthListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminAuthListSuspenseQueryOptions(
    appId,
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * 
    SUPER_ADMINÎßå Í∞ÄÎä•. Î™®Îì† Ïï±Ïùò ÏÇ¨Ïö©ÏûêÎ•º Ï°∞ÌöåÌï† Ïàò ÏûàÏäµÎãàÎã§.
    
 * @summary Ï†ÑÏ≤¥ ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå(superspace)
 */
export const getAdminAuthListAllUsersUrl = (
  params?: AdminAuthListAllUsersParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/admin/api/auth/users?${stringifiedParams}`
    : `/admin/api/auth/users`;
};

export const adminAuthListAllUsers = async (
  params?: AdminAuthListAllUsersParams,
  options?: RequestInit,
): Promise<UserInfoPageResponse> => {
  return customFetch<UserInfoPageResponse>(
    getAdminAuthListAllUsersUrl(params),
    {
      ...options,
      method: 'GET',
    },
  );
};

export const getAdminAuthListAllUsersQueryKey = (
  params?: AdminAuthListAllUsersParams,
) => {
  return [`/admin/api/auth/users`, ...(params ? [params] : [])] as const;
};

export const getAdminAuthListAllUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof adminAuthListAllUsers>>,
  TError = unknown,
>(
  params?: AdminAuthListAllUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminAuthListAllUsers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminAuthListAllUsersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminAuthListAllUsers>>
  > = ({signal}) => adminAuthListAllUsers(params, {signal, ...requestOptions});

  return {queryKey, queryFn, ...queryOptions} as UseQueryOptions<
    Awaited<ReturnType<typeof adminAuthListAllUsers>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type AdminAuthListAllUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminAuthListAllUsers>>
>;
export type AdminAuthListAllUsersQueryError = unknown;

export function useAdminAuthListAllUsers<
  TData = Awaited<ReturnType<typeof adminAuthListAllUsers>>,
  TError = unknown,
>(
  params: undefined | AdminAuthListAllUsersParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminAuthListAllUsers>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminAuthListAllUsers>>,
          TError,
          Awaited<ReturnType<typeof adminAuthListAllUsers>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminAuthListAllUsers<
  TData = Awaited<ReturnType<typeof adminAuthListAllUsers>>,
  TError = unknown,
>(
  params?: AdminAuthListAllUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminAuthListAllUsers>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof adminAuthListAllUsers>>,
          TError,
          Awaited<ReturnType<typeof adminAuthListAllUsers>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useAdminAuthListAllUsers<
  TData = Awaited<ReturnType<typeof adminAuthListAllUsers>>,
  TError = unknown,
>(
  params?: AdminAuthListAllUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminAuthListAllUsers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary Ï†ÑÏ≤¥ ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå(superspace)
 */

export function useAdminAuthListAllUsers<
  TData = Awaited<ReturnType<typeof adminAuthListAllUsers>>,
  TError = unknown,
>(
  params?: AdminAuthListAllUsersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof adminAuthListAllUsers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminAuthListAllUsersQueryOptions(params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getAdminAuthListAllUsersSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof adminAuthListAllUsers>>,
  TError = unknown,
>(
  params?: AdminAuthListAllUsersParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthListAllUsers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminAuthListAllUsersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminAuthListAllUsers>>
  > = ({signal}) => adminAuthListAllUsers(params, {signal, ...requestOptions});

  return {queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof adminAuthListAllUsers>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type AdminAuthListAllUsersSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminAuthListAllUsers>>
>;
export type AdminAuthListAllUsersSuspenseQueryError = unknown;

export function useAdminAuthListAllUsersSuspense<
  TData = Awaited<ReturnType<typeof adminAuthListAllUsers>>,
  TError = unknown,
>(
  params: undefined | AdminAuthListAllUsersParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthListAllUsers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminAuthListAllUsersSuspense<
  TData = Awaited<ReturnType<typeof adminAuthListAllUsers>>,
  TError = unknown,
>(
  params?: AdminAuthListAllUsersParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthListAllUsers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useAdminAuthListAllUsersSuspense<
  TData = Awaited<ReturnType<typeof adminAuthListAllUsers>>,
  TError = unknown,
>(
  params?: AdminAuthListAllUsersParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthListAllUsers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ï†ÑÏ≤¥ ÏÇ¨Ïö©Ïûê Î™©Î°ù Ï°∞Ìöå(superspace)
 */

export function useAdminAuthListAllUsersSuspense<
  TData = Awaited<ReturnType<typeof adminAuthListAllUsers>>,
  TError = unknown,
>(
  params?: AdminAuthListAllUsersParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof adminAuthListAllUsers>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getAdminAuthListAllUsersSuspenseQueryOptions(
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
