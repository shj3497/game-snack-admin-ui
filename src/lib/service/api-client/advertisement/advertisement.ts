/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * ÌïÄÌîåÎ°úÏö∞ ÌîÑÎ°úÎ™®ÏÖò: Admin API
 * ÌïÄÌîåÎ°úÏö∞ ÌîÑÎ°úÎ™®ÏÖò: Admin API Î¨∏ÏÑú
 * OpenAPI spec version: 1.0
 */
import {useMutation, useQuery, useSuspenseQuery} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
  UseSuspenseQueryOptions,
  UseSuspenseQueryResult,
} from '@tanstack/react-query';

import type {
  AdPlacementByAdPopcornRequest,
  AdPlacementByDawinRequest,
  AdPlacementByGoogleRequest,
  AdPlacementByMezzoRequest,
  AdPlacementDetailResponse,
  AdPlacementResponse,
  EmptyResponse,
  GetAdPlacementByAppIdListParams,
} from '.././model';

import {customFetch} from '../../custom-fetch.client';

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];

/**
 * Í∏∞Ï°¥ Í¥ëÍ≥† ÏßÄÎ©¥ÏùÑ ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary Î©îÏ°∞ Í¥ëÍ≥† ÏßÄÎ©¥ ÏàòÏ†ï
 */
export const getUpdateAdPlacementByMezzoUrl = (appId: string, id: string) => {
  return `/admin/api/ad/placements/mezzo/${appId}/${id}`;
};

export const updateAdPlacementByMezzo = async (
  appId: string,
  id: string,
  adPlacementByMezzoRequest: AdPlacementByMezzoRequest,
  options?: RequestInit,
): Promise<EmptyResponse> => {
  return customFetch<EmptyResponse>(getUpdateAdPlacementByMezzoUrl(appId, id), {
    ...options,
    method: 'PUT',
    headers: {'Content-Type': 'application/json', ...options?.headers},
    body: JSON.stringify(adPlacementByMezzoRequest),
  });
};

export const getUpdateAdPlacementByMezzoMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAdPlacementByMezzo>>,
    TError,
    {appId: string; id: string; data: AdPlacementByMezzoRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAdPlacementByMezzo>>,
  TError,
  {appId: string; id: string; data: AdPlacementByMezzoRequest},
  TContext
> => {
  const mutationKey = ['updateAdPlacementByMezzo'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAdPlacementByMezzo>>,
    {appId: string; id: string; data: AdPlacementByMezzoRequest}
  > = (props) => {
    const {appId, id, data} = props ?? {};

    return updateAdPlacementByMezzo(appId, id, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type UpdateAdPlacementByMezzoMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateAdPlacementByMezzo>>
>;
export type UpdateAdPlacementByMezzoMutationBody = AdPlacementByMezzoRequest;
export type UpdateAdPlacementByMezzoMutationError = unknown;

/**
 * @summary Î©îÏ°∞ Í¥ëÍ≥† ÏßÄÎ©¥ ÏàòÏ†ï
 */
export const useUpdateAdPlacementByMezzo = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateAdPlacementByMezzo>>,
      TError,
      {appId: string; id: string; data: AdPlacementByMezzoRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateAdPlacementByMezzo>>,
  TError,
  {appId: string; id: string; data: AdPlacementByMezzoRequest},
  TContext
> => {
  const mutationOptions = getUpdateAdPlacementByMezzoMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Í∏∞Ï°¥ Í¥ëÍ≥† ÏßÄÎ©¥ÏùÑ ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary Íµ¨Í∏Ä Í¥ëÍ≥† ÏßÄÎ©¥ ÏàòÏ†ï
 */
export const getUpdateAdPlacementByGoogleUrl = (appId: string, id: string) => {
  return `/admin/api/ad/placements/google/${appId}/${id}`;
};

export const updateAdPlacementByGoogle = async (
  appId: string,
  id: string,
  adPlacementByGoogleRequest: AdPlacementByGoogleRequest,
  options?: RequestInit,
): Promise<EmptyResponse> => {
  return customFetch<EmptyResponse>(
    getUpdateAdPlacementByGoogleUrl(appId, id),
    {
      ...options,
      method: 'PUT',
      headers: {'Content-Type': 'application/json', ...options?.headers},
      body: JSON.stringify(adPlacementByGoogleRequest),
    },
  );
};

export const getUpdateAdPlacementByGoogleMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAdPlacementByGoogle>>,
    TError,
    {appId: string; id: string; data: AdPlacementByGoogleRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAdPlacementByGoogle>>,
  TError,
  {appId: string; id: string; data: AdPlacementByGoogleRequest},
  TContext
> => {
  const mutationKey = ['updateAdPlacementByGoogle'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAdPlacementByGoogle>>,
    {appId: string; id: string; data: AdPlacementByGoogleRequest}
  > = (props) => {
    const {appId, id, data} = props ?? {};

    return updateAdPlacementByGoogle(appId, id, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type UpdateAdPlacementByGoogleMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateAdPlacementByGoogle>>
>;
export type UpdateAdPlacementByGoogleMutationBody = AdPlacementByGoogleRequest;
export type UpdateAdPlacementByGoogleMutationError = unknown;

/**
 * @summary Íµ¨Í∏Ä Í¥ëÍ≥† ÏßÄÎ©¥ ÏàòÏ†ï
 */
export const useUpdateAdPlacementByGoogle = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateAdPlacementByGoogle>>,
      TError,
      {appId: string; id: string; data: AdPlacementByGoogleRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateAdPlacementByGoogle>>,
  TError,
  {appId: string; id: string; data: AdPlacementByGoogleRequest},
  TContext
> => {
  const mutationOptions = getUpdateAdPlacementByGoogleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Í∏∞Ï°¥ Í¥ëÍ≥† ÏßÄÎ©¥ÏùÑ ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary Îã§Ïúà Í¥ëÍ≥† ÏßÄÎ©¥ ÏàòÏ†ï
 */
export const getUpdateAdPlacementByDawinUrl = (appId: string, id: string) => {
  return `/admin/api/ad/placements/dawin/${appId}/${id}`;
};

export const updateAdPlacementByDawin = async (
  appId: string,
  id: string,
  adPlacementByDawinRequest: AdPlacementByDawinRequest,
  options?: RequestInit,
): Promise<EmptyResponse> => {
  return customFetch<EmptyResponse>(getUpdateAdPlacementByDawinUrl(appId, id), {
    ...options,
    method: 'PUT',
    headers: {'Content-Type': 'application/json', ...options?.headers},
    body: JSON.stringify(adPlacementByDawinRequest),
  });
};

export const getUpdateAdPlacementByDawinMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAdPlacementByDawin>>,
    TError,
    {appId: string; id: string; data: AdPlacementByDawinRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAdPlacementByDawin>>,
  TError,
  {appId: string; id: string; data: AdPlacementByDawinRequest},
  TContext
> => {
  const mutationKey = ['updateAdPlacementByDawin'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAdPlacementByDawin>>,
    {appId: string; id: string; data: AdPlacementByDawinRequest}
  > = (props) => {
    const {appId, id, data} = props ?? {};

    return updateAdPlacementByDawin(appId, id, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type UpdateAdPlacementByDawinMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateAdPlacementByDawin>>
>;
export type UpdateAdPlacementByDawinMutationBody = AdPlacementByDawinRequest;
export type UpdateAdPlacementByDawinMutationError = unknown;

/**
 * @summary Îã§Ïúà Í¥ëÍ≥† ÏßÄÎ©¥ ÏàòÏ†ï
 */
export const useUpdateAdPlacementByDawin = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateAdPlacementByDawin>>,
      TError,
      {appId: string; id: string; data: AdPlacementByDawinRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateAdPlacementByDawin>>,
  TError,
  {appId: string; id: string; data: AdPlacementByDawinRequest},
  TContext
> => {
  const mutationOptions = getUpdateAdPlacementByDawinMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Í∏∞Ï°¥ Í¥ëÍ≥† ÏßÄÎ©¥ÏùÑ ÏàòÏ†ïÌï©ÎãàÎã§.
 * @summary Ïï†ÎìúÌåùÏΩò Í¥ëÍ≥† ÏßÄÎ©¥ ÏàòÏ†ï
 */
export const getUpdateAdPlacementByAdPopcornUrl = (
  appId: string,
  id: string,
) => {
  return `/admin/api/ad/placements/adpopcorn/${appId}/${id}`;
};

export const updateAdPlacementByAdPopcorn = async (
  appId: string,
  id: string,
  adPlacementByAdPopcornRequest: AdPlacementByAdPopcornRequest,
  options?: RequestInit,
): Promise<EmptyResponse> => {
  return customFetch<EmptyResponse>(
    getUpdateAdPlacementByAdPopcornUrl(appId, id),
    {
      ...options,
      method: 'PUT',
      headers: {'Content-Type': 'application/json', ...options?.headers},
      body: JSON.stringify(adPlacementByAdPopcornRequest),
    },
  );
};

export const getUpdateAdPlacementByAdPopcornMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAdPlacementByAdPopcorn>>,
    TError,
    {appId: string; id: string; data: AdPlacementByAdPopcornRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAdPlacementByAdPopcorn>>,
  TError,
  {appId: string; id: string; data: AdPlacementByAdPopcornRequest},
  TContext
> => {
  const mutationKey = ['updateAdPlacementByAdPopcorn'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAdPlacementByAdPopcorn>>,
    {appId: string; id: string; data: AdPlacementByAdPopcornRequest}
  > = (props) => {
    const {appId, id, data} = props ?? {};

    return updateAdPlacementByAdPopcorn(appId, id, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type UpdateAdPlacementByAdPopcornMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateAdPlacementByAdPopcorn>>
>;
export type UpdateAdPlacementByAdPopcornMutationBody =
  AdPlacementByAdPopcornRequest;
export type UpdateAdPlacementByAdPopcornMutationError = unknown;

/**
 * @summary Ïï†ÎìúÌåùÏΩò Í¥ëÍ≥† ÏßÄÎ©¥ ÏàòÏ†ï
 */
export const useUpdateAdPlacementByAdPopcorn = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateAdPlacementByAdPopcorn>>,
      TError,
      {appId: string; id: string; data: AdPlacementByAdPopcornRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateAdPlacementByAdPopcorn>>,
  TError,
  {appId: string; id: string; data: AdPlacementByAdPopcornRequest},
  TContext
> => {
  const mutationOptions =
    getUpdateAdPlacementByAdPopcornMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * ÏÉàÎ°úÏö¥ Í¥ëÍ≥† ÏßÄÎ©¥ÏùÑ Îì±Î°ùÌï©ÎãàÎã§.
 * @summary Î©îÏ°∞ Í¥ëÍ≥† ÏßÄÎ©¥ Ïã†Í∑ú Îì±Î°ù
 */
export const getCreateAdPlacementByMezzoUrl = (appId: string) => {
  return `/admin/api/ad/placements/mezzo/${appId}`;
};

export const createAdPlacementByMezzo = async (
  appId: string,
  adPlacementByMezzoRequest: AdPlacementByMezzoRequest,
  options?: RequestInit,
): Promise<EmptyResponse> => {
  return customFetch<EmptyResponse>(getCreateAdPlacementByMezzoUrl(appId), {
    ...options,
    method: 'POST',
    headers: {'Content-Type': 'application/json', ...options?.headers},
    body: JSON.stringify(adPlacementByMezzoRequest),
  });
};

export const getCreateAdPlacementByMezzoMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAdPlacementByMezzo>>,
    TError,
    {appId: string; data: AdPlacementByMezzoRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAdPlacementByMezzo>>,
  TError,
  {appId: string; data: AdPlacementByMezzoRequest},
  TContext
> => {
  const mutationKey = ['createAdPlacementByMezzo'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAdPlacementByMezzo>>,
    {appId: string; data: AdPlacementByMezzoRequest}
  > = (props) => {
    const {appId, data} = props ?? {};

    return createAdPlacementByMezzo(appId, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type CreateAdPlacementByMezzoMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAdPlacementByMezzo>>
>;
export type CreateAdPlacementByMezzoMutationBody = AdPlacementByMezzoRequest;
export type CreateAdPlacementByMezzoMutationError = unknown;

/**
 * @summary Î©îÏ°∞ Í¥ëÍ≥† ÏßÄÎ©¥ Ïã†Í∑ú Îì±Î°ù
 */
export const useCreateAdPlacementByMezzo = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createAdPlacementByMezzo>>,
      TError,
      {appId: string; data: AdPlacementByMezzoRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createAdPlacementByMezzo>>,
  TError,
  {appId: string; data: AdPlacementByMezzoRequest},
  TContext
> => {
  const mutationOptions = getCreateAdPlacementByMezzoMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * ÏÉàÎ°úÏö¥ Í¥ëÍ≥† ÏßÄÎ©¥ÏùÑ Îì±Î°ùÌï©ÎãàÎã§.
 * @summary Íµ¨Í∏Ä Í¥ëÍ≥† ÏßÄÎ©¥ Ïã†Í∑ú Îì±Î°ù
 */
export const getCreateAdPlacementByGoogleUrl = (appId: string) => {
  return `/admin/api/ad/placements/google/${appId}`;
};

export const createAdPlacementByGoogle = async (
  appId: string,
  adPlacementByGoogleRequest: AdPlacementByGoogleRequest,
  options?: RequestInit,
): Promise<EmptyResponse> => {
  return customFetch<EmptyResponse>(getCreateAdPlacementByGoogleUrl(appId), {
    ...options,
    method: 'POST',
    headers: {'Content-Type': 'application/json', ...options?.headers},
    body: JSON.stringify(adPlacementByGoogleRequest),
  });
};

export const getCreateAdPlacementByGoogleMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAdPlacementByGoogle>>,
    TError,
    {appId: string; data: AdPlacementByGoogleRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAdPlacementByGoogle>>,
  TError,
  {appId: string; data: AdPlacementByGoogleRequest},
  TContext
> => {
  const mutationKey = ['createAdPlacementByGoogle'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAdPlacementByGoogle>>,
    {appId: string; data: AdPlacementByGoogleRequest}
  > = (props) => {
    const {appId, data} = props ?? {};

    return createAdPlacementByGoogle(appId, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type CreateAdPlacementByGoogleMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAdPlacementByGoogle>>
>;
export type CreateAdPlacementByGoogleMutationBody = AdPlacementByGoogleRequest;
export type CreateAdPlacementByGoogleMutationError = unknown;

/**
 * @summary Íµ¨Í∏Ä Í¥ëÍ≥† ÏßÄÎ©¥ Ïã†Í∑ú Îì±Î°ù
 */
export const useCreateAdPlacementByGoogle = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createAdPlacementByGoogle>>,
      TError,
      {appId: string; data: AdPlacementByGoogleRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createAdPlacementByGoogle>>,
  TError,
  {appId: string; data: AdPlacementByGoogleRequest},
  TContext
> => {
  const mutationOptions = getCreateAdPlacementByGoogleMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * ÏÉàÎ°úÏö¥ Í¥ëÍ≥† ÏßÄÎ©¥ÏùÑ Îì±Î°ùÌï©ÎãàÎã§.
 * @summary Îã§Ïúà Í¥ëÍ≥† ÏßÄÎ©¥ Ïã†Í∑ú Îì±Î°ù
 */
export const getCreateAdPlacementByDawinUrl = (appId: string) => {
  return `/admin/api/ad/placements/dawin/${appId}`;
};

export const createAdPlacementByDawin = async (
  appId: string,
  adPlacementByDawinRequest: AdPlacementByDawinRequest,
  options?: RequestInit,
): Promise<EmptyResponse> => {
  return customFetch<EmptyResponse>(getCreateAdPlacementByDawinUrl(appId), {
    ...options,
    method: 'POST',
    headers: {'Content-Type': 'application/json', ...options?.headers},
    body: JSON.stringify(adPlacementByDawinRequest),
  });
};

export const getCreateAdPlacementByDawinMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAdPlacementByDawin>>,
    TError,
    {appId: string; data: AdPlacementByDawinRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAdPlacementByDawin>>,
  TError,
  {appId: string; data: AdPlacementByDawinRequest},
  TContext
> => {
  const mutationKey = ['createAdPlacementByDawin'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAdPlacementByDawin>>,
    {appId: string; data: AdPlacementByDawinRequest}
  > = (props) => {
    const {appId, data} = props ?? {};

    return createAdPlacementByDawin(appId, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type CreateAdPlacementByDawinMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAdPlacementByDawin>>
>;
export type CreateAdPlacementByDawinMutationBody = AdPlacementByDawinRequest;
export type CreateAdPlacementByDawinMutationError = unknown;

/**
 * @summary Îã§Ïúà Í¥ëÍ≥† ÏßÄÎ©¥ Ïã†Í∑ú Îì±Î°ù
 */
export const useCreateAdPlacementByDawin = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createAdPlacementByDawin>>,
      TError,
      {appId: string; data: AdPlacementByDawinRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createAdPlacementByDawin>>,
  TError,
  {appId: string; data: AdPlacementByDawinRequest},
  TContext
> => {
  const mutationOptions = getCreateAdPlacementByDawinMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * ÏÉàÎ°úÏö¥ Í¥ëÍ≥† ÏßÄÎ©¥ÏùÑ Îì±Î°ùÌï©ÎãàÎã§.
 * @summary Ïï†ÎìúÌåùÏΩò Í¥ëÍ≥† ÏßÄÎ©¥ Ïã†Í∑ú Îì±Î°ù
 */
export const getCreateAdPlacementByAdPopcornUrl = (appId: string) => {
  return `/admin/api/ad/placements/adpopcorn/${appId}`;
};

export const createAdPlacementByAdPopcorn = async (
  appId: string,
  adPlacementByAdPopcornRequest: AdPlacementByAdPopcornRequest,
  options?: RequestInit,
): Promise<EmptyResponse> => {
  return customFetch<EmptyResponse>(getCreateAdPlacementByAdPopcornUrl(appId), {
    ...options,
    method: 'POST',
    headers: {'Content-Type': 'application/json', ...options?.headers},
    body: JSON.stringify(adPlacementByAdPopcornRequest),
  });
};

export const getCreateAdPlacementByAdPopcornMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAdPlacementByAdPopcorn>>,
    TError,
    {appId: string; data: AdPlacementByAdPopcornRequest},
    TContext
  >;
  request?: SecondParameter<typeof customFetch>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAdPlacementByAdPopcorn>>,
  TError,
  {appId: string; data: AdPlacementByAdPopcornRequest},
  TContext
> => {
  const mutationKey = ['createAdPlacementByAdPopcorn'];
  const {mutation: mutationOptions, request: requestOptions} = options
    ? options.mutation &&
      'mutationKey' in options.mutation &&
      options.mutation.mutationKey
      ? options
      : {...options, mutation: {...options.mutation, mutationKey}}
    : {mutation: {mutationKey}, request: undefined};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAdPlacementByAdPopcorn>>,
    {appId: string; data: AdPlacementByAdPopcornRequest}
  > = (props) => {
    const {appId, data} = props ?? {};

    return createAdPlacementByAdPopcorn(appId, data, requestOptions);
  };

  return {mutationFn, ...mutationOptions};
};

export type CreateAdPlacementByAdPopcornMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAdPlacementByAdPopcorn>>
>;
export type CreateAdPlacementByAdPopcornMutationBody =
  AdPlacementByAdPopcornRequest;
export type CreateAdPlacementByAdPopcornMutationError = unknown;

/**
 * @summary Ïï†ÎìúÌåùÏΩò Í¥ëÍ≥† ÏßÄÎ©¥ Ïã†Í∑ú Îì±Î°ù
 */
export const useCreateAdPlacementByAdPopcorn = <
  TError = unknown,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createAdPlacementByAdPopcorn>>,
      TError,
      {appId: string; data: AdPlacementByAdPopcornRequest},
      TContext
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createAdPlacementByAdPopcorn>>,
  TError,
  {appId: string; data: AdPlacementByAdPopcornRequest},
  TContext
> => {
  const mutationOptions =
    getCreateAdPlacementByAdPopcornMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Ïï± Î≥Ñ Í¥ëÍ≥† ÏßÄÎ©¥ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */
export const getGetAdPlacementByIdUrl = (appId: string, id: string) => {
  return `/admin/api/ad/placements/${appId}/${id}`;
};

export const getAdPlacementById = async (
  appId: string,
  id: string,
  options?: RequestInit,
): Promise<AdPlacementDetailResponse> => {
  return customFetch<AdPlacementDetailResponse>(
    getGetAdPlacementByIdUrl(appId, id),
    {
      ...options,
      method: 'GET',
    },
  );
};

export const getGetAdPlacementByIdQueryKey = (appId: string, id: string) => {
  return [`/admin/api/ad/placements/${appId}/${id}`] as const;
};

export const getGetAdPlacementByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdPlacementById>>,
  TError = unknown,
>(
  appId: string,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAdPlacementByIdQueryKey(appId, id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAdPlacementById>>
  > = ({signal}) => getAdPlacementById(appId, id, {signal, ...requestOptions});

  return {
    queryKey,
    queryFn,
    enabled: !!(appId && id),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAdPlacementById>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetAdPlacementByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAdPlacementById>>
>;
export type GetAdPlacementByIdQueryError = unknown;

export function useGetAdPlacementById<
  TData = Awaited<ReturnType<typeof getAdPlacementById>>,
  TError = unknown,
>(
  appId: string,
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementById>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdPlacementById>>,
          TError,
          Awaited<ReturnType<typeof getAdPlacementById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAdPlacementById<
  TData = Awaited<ReturnType<typeof getAdPlacementById>>,
  TError = unknown,
>(
  appId: string,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementById>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdPlacementById>>,
          TError,
          Awaited<ReturnType<typeof getAdPlacementById>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useGetAdPlacementById<
  TData = Awaited<ReturnType<typeof getAdPlacementById>>,
  TError = unknown,
>(
  appId: string,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary Ïï± Î≥Ñ Í¥ëÍ≥† ÏßÄÎ©¥ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useGetAdPlacementById<
  TData = Awaited<ReturnType<typeof getAdPlacementById>>,
  TError = unknown,
>(
  appId: string,
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAdPlacementByIdQueryOptions(appId, id, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAdPlacementByIdSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdPlacementById>>,
  TError = unknown,
>(
  appId: string,
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAdPlacementByIdQueryKey(appId, id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAdPlacementById>>
  > = ({signal}) => getAdPlacementById(appId, id, {signal, ...requestOptions});

  return {queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getAdPlacementById>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetAdPlacementByIdSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAdPlacementById>>
>;
export type GetAdPlacementByIdSuspenseQueryError = unknown;

export function useGetAdPlacementByIdSuspense<
  TData = Awaited<ReturnType<typeof getAdPlacementById>>,
  TError = unknown,
>(
  appId: string,
  id: string,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAdPlacementByIdSuspense<
  TData = Awaited<ReturnType<typeof getAdPlacementById>>,
  TError = unknown,
>(
  appId: string,
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAdPlacementByIdSuspense<
  TData = Awaited<ReturnType<typeof getAdPlacementById>>,
  TError = unknown,
>(
  appId: string,
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ïï± Î≥Ñ Í¥ëÍ≥† ÏßÄÎ©¥ ÏÉÅÏÑ∏ Ï°∞Ìöå
 */

export function useGetAdPlacementByIdSuspense<
  TData = Awaited<ReturnType<typeof getAdPlacementById>>,
  TError = unknown,
>(
  appId: string,
  id: string,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementById>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAdPlacementByIdSuspenseQueryOptions(
    appId,
    id,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * ÌïÑÌÑ∞ÏôÄ ÌéòÏù¥Ïßï Ï†ïÎ≥¥Î•º Í∏∞Î∞òÏúºÎ°ú Í¥ëÍ≥† ÏßÄÎ©¥ Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.<br/><br/>- ÌïÑÌÑ∞ Ï°∞Í±¥ÏùÄ JSON ÌòïÏãùÏúºÎ°ú Ï†ÑÎã¨Îê©ÎãàÎã§.<br/><br/>- ÏòàÏãú) {"adProviderType":"ADPOPCORN"}
 * @summary Ïï± Î≥Ñ Í¥ëÍ≥† ÏßÄÎ©¥ Î™©Î°ù Ï°∞Ìöå
 */
export const getGetAdPlacementByAppIdListUrl = (
  appId: string,
  params?: GetAdPlacementByAppIdListParams,
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  const stringifiedParams = normalizedParams.toString();

  return stringifiedParams.length > 0
    ? `/admin/api/ad/placements/${appId}/list?${stringifiedParams}`
    : `/admin/api/ad/placements/${appId}/list`;
};

export const getAdPlacementByAppIdList = async (
  appId: string,
  params?: GetAdPlacementByAppIdListParams,
  options?: RequestInit,
): Promise<AdPlacementResponse> => {
  return customFetch<AdPlacementResponse>(
    getGetAdPlacementByAppIdListUrl(appId, params),
    {
      ...options,
      method: 'GET',
    },
  );
};

export const getGetAdPlacementByAppIdListQueryKey = (
  appId: string,
  params?: GetAdPlacementByAppIdListParams,
) => {
  return [
    `/admin/api/ad/placements/${appId}/list`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetAdPlacementByAppIdListQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
  TError = unknown,
>(
  appId: string,
  params?: GetAdPlacementByAppIdListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetAdPlacementByAppIdListQueryKey(appId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAdPlacementByAppIdList>>
  > = ({signal}) =>
    getAdPlacementByAppIdList(appId, params, {signal, ...requestOptions});

  return {
    queryKey,
    queryFn,
    enabled: !!appId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetAdPlacementByAppIdListQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAdPlacementByAppIdList>>
>;
export type GetAdPlacementByAppIdListQueryError = unknown;

export function useGetAdPlacementByAppIdList<
  TData = Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
  TError = unknown,
>(
  appId: string,
  params: undefined | GetAdPlacementByAppIdListParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
          TError,
          Awaited<ReturnType<typeof getAdPlacementByAppIdList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAdPlacementByAppIdList<
  TData = Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
  TError = unknown,
>(
  appId: string,
  params?: GetAdPlacementByAppIdListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
          TError,
          Awaited<ReturnType<typeof getAdPlacementByAppIdList>>
        >,
        'initialData'
      >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
export function useGetAdPlacementByAppIdList<
  TData = Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
  TError = unknown,
>(
  appId: string,
  params?: GetAdPlacementByAppIdListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {queryKey: DataTag<QueryKey, TData, TError>};
/**
 * @summary Ïï± Î≥Ñ Í¥ëÍ≥† ÏßÄÎ©¥ Î™©Î°ù Ï°∞Ìöå
 */

export function useGetAdPlacementByAppIdList<
  TData = Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
  TError = unknown,
>(
  appId: string,
  params?: GetAdPlacementByAppIdListParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAdPlacementByAppIdListQueryOptions(
    appId,
    params,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & {queryKey: DataTag<QueryKey, TData, TError>};

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const getGetAdPlacementByAppIdListSuspenseQueryOptions = <
  TData = Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
  TError = unknown,
>(
  appId: string,
  params?: GetAdPlacementByAppIdListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
) => {
  const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getGetAdPlacementByAppIdListQueryKey(appId, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAdPlacementByAppIdList>>
  > = ({signal}) =>
    getAdPlacementByAppIdList(appId, params, {signal, ...requestOptions});

  return {queryKey, queryFn, ...queryOptions} as UseSuspenseQueryOptions<
    Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
    TError,
    TData
  > & {queryKey: DataTag<QueryKey, TData, TError>};
};

export type GetAdPlacementByAppIdListSuspenseQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAdPlacementByAppIdList>>
>;
export type GetAdPlacementByAppIdListSuspenseQueryError = unknown;

export function useGetAdPlacementByAppIdListSuspense<
  TData = Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
  TError = unknown,
>(
  appId: string,
  params: undefined | GetAdPlacementByAppIdListParams,
  options: {
    query: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAdPlacementByAppIdListSuspense<
  TData = Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
  TError = unknown,
>(
  appId: string,
  params?: GetAdPlacementByAppIdListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetAdPlacementByAppIdListSuspense<
  TData = Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
  TError = unknown,
>(
  appId: string,
  params?: GetAdPlacementByAppIdListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Ïï± Î≥Ñ Í¥ëÍ≥† ÏßÄÎ©¥ Î™©Î°ù Ï°∞Ìöå
 */

export function useGetAdPlacementByAppIdListSuspense<
  TData = Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
  TError = unknown,
>(
  appId: string,
  params?: GetAdPlacementByAppIdListParams,
  options?: {
    query?: Partial<
      UseSuspenseQueryOptions<
        Awaited<ReturnType<typeof getAdPlacementByAppIdList>>,
        TError,
        TData
      >
    >;
    request?: SecondParameter<typeof customFetch>;
  },
  queryClient?: QueryClient,
): UseSuspenseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetAdPlacementByAppIdListSuspenseQueryOptions(
    appId,
    params,
    options,
  );

  const query = useSuspenseQuery(
    queryOptions,
    queryClient,
  ) as UseSuspenseQueryResult<TData, TError> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}
